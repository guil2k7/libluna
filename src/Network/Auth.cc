// Copyright 2024 Maicol Castro (maicolcastro.abc@gmail.com).

#include <Luna/Network/Auth.hh>
#include <RakNet/SHA1.h>
#include <string>
#include <cstdint>

using namespace Luna::Network;

static uint8_t const AUTH_HASH_TRANSFORM_TABLE[100] = {
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xE4, 0xB5, 0xB7, 0x0A, 0x00, 0x00, 0x00,
    0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
    0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41,
    0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8E, 0x7C, 0xFB, 0x51, 0x93, 0x00, 0x00,
    0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A, 0x25, 0x00, 0x00,
    0x80, 0x83, 0x00, 0x00, 0xF9, 0xFF, 0x00, 0x00, 0x80, 0xE9, 0x00, 0x00,
    0x75, 0x30, 0x00, 0x00
};

static uint8_t TransformAuthSHA1(uint8_t value, uint8_t salt) {
    uint8_t result = value;

    for (uint8_t i = 0; i < sizeof (AUTH_HASH_TRANSFORM_TABLE); ++i)
        result ^= AUTH_HASH_TRANSFORM_TABLE[i] ^ salt;

    return result;
}

static uint8_t const CANIMMANAGER_ADDANIMATION[20] = {
    0xFF, 0x25, 0x34, 0x39,
    0x4D, 0x00, 0x90, 0x90,
    0x90, 0x90, 0x56, 0x57,
    0x50, 0x8B, 0x44, 0x24,
    0x14, 0x8D, 0x0C, 0x80
};

static char DigitToHex(int digit) {
    if (digit > 9)
        return digit - 10 + 'A';

    return digit + '0';
}

static void StringifyHash(std::string& output, uint8_t const* hash) {
    for (size_t i = 0; i < 40; ++i, ++hash) {
        output += DigitToHex(*hash >> 4);
        output += DigitToHex(*hash & 0xF);
    }
}

std::string Luna::Network::GenerateAuthKey(std::string_view recvdKey) {
    RakNet::CSHA1 hasher;
    hasher.Update(reinterpret_cast<uint8_t const*>(recvdKey.data()), recvdKey.length());

    uint8_t hash[20];
    hasher.GetHash(hash);

    size_t i = 0;

    for (; i < 5; ++i)
        hash[i] = TransformAuthSHA1(hash[i], 0x2F);

    for (; i < 10; ++i)
        hash[i] = TransformAuthSHA1(hash[i], 0x45);

    for (; i < 15; ++i)
        hash[i] = TransformAuthSHA1(hash[i], 0x6F);

    for (; i < 20; ++i)
        hash[i] = TransformAuthSHA1(hash[i], 0xDB);

    for (i = 0; i < 20; ++i)
        hash[i] ^= CANIMMANAGER_ADDANIMATION[i];

    std::string auth;
    auth.reserve(40);

    StringifyHash(auth, hash);

    return auth;
}
