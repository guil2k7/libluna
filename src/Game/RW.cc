#include <Luna/Game/RW.hh>
#include <Luna/Game/Common.hh>

using namespace Luna;
using namespace Luna::Game;

void CRenderWare::InitialiseLuna() {
    *reinterpret_cast<void**>(&RwEngineInstance)                                   = GameAddress + 0x6CCD38;
    *reinterpret_cast<void**>(&RsGlobal)                                           = GameAddress + 0xA0C8FC;

    *reinterpret_cast<void**>(&RwOsGetMemoryInterface)                             = GameAddress + 0x1F4F19;
    *reinterpret_cast<void**>(&RwFreeListCreateAndPreallocateSpace)                = GameAddress + 0x1F466D;
    *reinterpret_cast<void**>(&RwFreeListDestroy)                                  = GameAddress + 0x1F4671;
    *reinterpret_cast<void**>(&RwFreeListSetFlags)                                 = GameAddress + 0x1F46F5;
    *reinterpret_cast<void**>(&RwFreeListGetFlags)                                 = GameAddress + 0x1F4701;
    *reinterpret_cast<void**>(&RwFreeListPurge)                                    = GameAddress + 0x1F4909;
    *reinterpret_cast<void**>(&RwFreeListForAllUsed)                               = GameAddress + 0x1F4A19;
    *reinterpret_cast<void**>(&RwFreeListPurgeAllFreeLists)                        = GameAddress + 0x1F4BE5;
    *reinterpret_cast<void**>(&RwStreamSetFreeListCreateParams)                    = GameAddress + 0x1F5535;
    *reinterpret_cast<void**>(&_rwStreamInitialize)                                = GameAddress + 0x1F55ED;
    *reinterpret_cast<void**>(&RwStreamOpen)                                       = GameAddress + 0x1F59F1;
    *reinterpret_cast<void**>(&RwStreamClose)                                      = GameAddress + 0x1F5959;
    *reinterpret_cast<void**>(&RwStreamRead)                                       = GameAddress + 0x1F56D5;
    *reinterpret_cast<void**>(&RwStreamWrite)                                      = GameAddress + 0x1F57B5;
    *reinterpret_cast<void**>(&RwStreamSkip)                                       = GameAddress + 0x1F58CD;
    *reinterpret_cast<void**>(&_rwStringOpen)                                      = GameAddress + 0x1F7035;
    *reinterpret_cast<void**>(&_rwStringClose)                                     = GameAddress + 0x1F71E5;
    *reinterpret_cast<void**>(&_rwStringDestroy)                                   = GameAddress + 0x1E4ECD;
    *reinterpret_cast<void**>(&_rwStringStreamGetSize)                             = GameAddress + 0x1E4EE9;
    *reinterpret_cast<void**>(&_rwStringStreamWrite)                               = GameAddress + 0x1E4F15;
    *reinterpret_cast<void**>(&_rwStringStreamFindAndRead)                         = GameAddress + 0x1E4F89;
    *reinterpret_cast<void**>(&RwPluginRegistrySetFreeListCreateParams)            = GameAddress + 0x1F5D5D;
    *reinterpret_cast<void**>(&_rwPluginRegistrySetStaticPluginsSize)              = GameAddress + 0x1F5EF5;
    *reinterpret_cast<void**>(&_rwPluginRegistryAddPlugin)                         = GameAddress + 0x1F5F35;
    *reinterpret_cast<void**>(&_rwPluginRegistryGetPluginOffset)                   = GameAddress + 0x1F5F19;
    *reinterpret_cast<void**>(&_rwPluginRegistryInitObject)                        = GameAddress + 0x1F617B;
    *reinterpret_cast<void**>(&_rwPluginRegistryDeInitObject)                      = GameAddress + 0x1F61BD;
    *reinterpret_cast<void**>(&_rwPluginRegistryCopyObject)                        = GameAddress + 0x1F61E5;
    *reinterpret_cast<void**>(&_rwPluginRegistryAddPluginStream)                   = GameAddress + 0x1F5A5D;
    *reinterpret_cast<void**>(&_rwPluginRegistryAddPlgnStrmlwysCB)                 = GameAddress + 0x1F5A9B;
    *reinterpret_cast<void**>(&_rwPluginRegistryAddPlgnStrmRightsCB)               = GameAddress + 0x1F5AC1;
    *reinterpret_cast<void**>(&_rwPluginRegistryReadDataChunks)                    = GameAddress + 0x1F5AE9;
    *reinterpret_cast<void**>(&_rwPluginRegistryWriteDataChunks)                   = GameAddress + 0x1F5C4B;
    *reinterpret_cast<void**>(&_rwPluginRegistrySkipDataChunks)                    = GameAddress + 0x1F5CFB;
    *reinterpret_cast<void**>(&_rwPluginRegistryGetSize)                           = GameAddress + 0x1F5C13;
    *reinterpret_cast<void**>(&_rwPluginRegistryInvokeRights)                      = GameAddress + 0x1F5BD9;
    *reinterpret_cast<void**>(&RwEngineGetMatrixTolerances)                        = GameAddress + 0x1F31F1;
    *reinterpret_cast<void**>(&RwEngineSetMatrixTolerances)                        = GameAddress + 0x1F31C9;
    *reinterpret_cast<void**>(&RwMatrixSetFreeListCreateParams)                    = GameAddress + 0x1F3111;
    *reinterpret_cast<void**>(&RwMatrixDestroy)                                    = GameAddress + 0x1F446D;
    *reinterpret_cast<void**>(&RwMatrixCreate)                                     = GameAddress + 0x1F4495;
    *reinterpret_cast<void**>(&RwMatrixMultiply)                                   = GameAddress + 0x1F33E5;
    *reinterpret_cast<void**>(&RwMatrixTransform)                                  = GameAddress + 0x1F402D;
    *reinterpret_cast<void**>(&RwMatrixOrthoNormalize)                             = GameAddress + 0x1F3421;
    *reinterpret_cast<void**>(&RwMatrixInvert)                                     = GameAddress + 0x1F39A9;
    *reinterpret_cast<void**>(&RwMatrixScale)                                      = GameAddress + 0x1F3CFD;
    *reinterpret_cast<void**>(&RwMatrixTranslate)                                  = GameAddress + 0x1F3ED5;
    *reinterpret_cast<void**>(&RwMatrixRotate)                                     = GameAddress + 0x1F38F5;
    *reinterpret_cast<void**>(&RwMatrixRotateOneMinusCosineSine)                   = GameAddress + 0x1F3745;
    *reinterpret_cast<void**>(&RwMatrixQueryRotate)                                = GameAddress + 0x1F4135;
    *reinterpret_cast<void**>(&RwMatrixUpdate)                                     = GameAddress + 0x1F33D5;
    *reinterpret_cast<void**>(&RwMatrixOptimize)                                   = GameAddress + 0x1F3219;
    *reinterpret_cast<void**>(&_rwMatrixDeterminant)                               = GameAddress + 0x1F2EB9;
    *reinterpret_cast<void**>(&_rwMatrixNormalError)                               = GameAddress + 0x1F2F95;
    *reinterpret_cast<void**>(&_rwMatrixOrthogonalError)                           = GameAddress + 0x1F2F1B;
    *reinterpret_cast<void**>(&_rwMatrixIdentityError)                             = GameAddress + 0x1F301F;
    *reinterpret_cast<void**>(&RwV3dNormalize)                                     = GameAddress + 0x1F65D9;
    *reinterpret_cast<void**>(&RwV3dLength)                                        = GameAddress + 0x1F6739;
    *reinterpret_cast<void**>(&RwV2dLength)                                        = GameAddress + 0x1F67B1;
    *reinterpret_cast<void**>(&RwV2dNormalize)                                     = GameAddress + 0x1F681D;
    *reinterpret_cast<void**>(&RwV3dTransformPoint)                                = GameAddress + 0x1F690D;
    *reinterpret_cast<void**>(&RwV3dTransformPoints)                               = GameAddress + 0x1F6935;
    *reinterpret_cast<void**>(&RwV3dTransformVector)                               = GameAddress + 0x1F6965;
    *reinterpret_cast<void**>(&RwV3dTransformVectors)                              = GameAddress + 0x1F698D;
    *reinterpret_cast<void**>(&_rwSqrt)                                            = GameAddress + 0x1F66E1;
    *reinterpret_cast<void**>(&_rwInvSqrt)                                         = GameAddress + 0x1F6581;
    *reinterpret_cast<void**>(&_rwV3dNormalize)                                    = GameAddress + 0x1F64E5;
    *reinterpret_cast<void**>(&_rwSListCreate)                                     = GameAddress + 0x1F2931;
    *reinterpret_cast<void**>(&_rwSListDestroy)                                    = GameAddress + 0x1F2B51;
    *reinterpret_cast<void**>(&_rwSListDestroyEndEntries)                          = GameAddress + 0x1F2B37;
    *reinterpret_cast<void**>(&_rwSListGetEntry)                                   = GameAddress + 0x1F2BF5;
    *reinterpret_cast<void**>(&_rwSListGetNewEntry)                                = GameAddress + 0x1F29D9;
    *reinterpret_cast<void**>(&_rwSListGetNumEntries)                              = GameAddress + 0x1F2BB1;
    *reinterpret_cast<void**>(&_rwSListGetBegin)                                   = GameAddress + 0x1F2BFF;
    *reinterpret_cast<void**>(&_rwSListGetEnd)                                     = GameAddress + 0x1F2C03;
    *reinterpret_cast<void**>(&RwIm2DRenderPrimitive)                              = GameAddress + 0x1F2909;
    *reinterpret_cast<void**>(&RwIm2DRenderIndexedPrimitive)                       = GameAddress + 0x1F2919;
    *reinterpret_cast<void**>(&RwIm2DRenderTriangle)                               = GameAddress + 0x1F28F1;
    *reinterpret_cast<void**>(&RwIm2DRenderLine)                                   = GameAddress + 0x1F28D9;
    *reinterpret_cast<void**>(&RwEngineGetVersion)                                 = GameAddress + 0x1E73A9;
    *reinterpret_cast<void**>(&RwEngineInit)                                       = GameAddress + 0x1E7A8D;
    *reinterpret_cast<void**>(&RwEngineRegisterPlugin)                             = GameAddress + 0x1E73B5;
    *reinterpret_cast<void**>(&RwEngineGetPluginOffset)                            = GameAddress + 0x1E73DD;
    *reinterpret_cast<void**>(&RwEngineOpen)                                       = GameAddress + 0x1E78B5;
    *reinterpret_cast<void**>(&RwEngineStart)                                      = GameAddress + 0x1E7785;
    *reinterpret_cast<void**>(&RwEngineStop)                                       = GameAddress + 0x1E770D;
    *reinterpret_cast<void**>(&RwEngineClose)                                      = GameAddress + 0x1E7825;
    *reinterpret_cast<void**>(&RwEngineTerm)                                       = GameAddress + 0x1E7A4D;
    *reinterpret_cast<void**>(&RwEngineGetNumSubSystems)                           = GameAddress + 0x1E73ED;
    *reinterpret_cast<void**>(&RwEngineGetSubSystemInfo)                           = GameAddress + 0x1E7421;
    *reinterpret_cast<void**>(&RwEngineGetCurrentSubSystem)                        = GameAddress + 0x1E7491;
    *reinterpret_cast<void**>(&RwEngineSetSubSystem)                               = GameAddress + 0x1E74C1;
    *reinterpret_cast<void**>(&RwEngineGetNumVideoModes)                           = GameAddress + 0x1E750D;
    *reinterpret_cast<void**>(&RwEngineGetVideoModeInfo)                           = GameAddress + 0x1E7555;
    *reinterpret_cast<void**>(&RwEngineGetCurrentVideoMode)                        = GameAddress + 0x1E75A1;
    *reinterpret_cast<void**>(&RwEngineSetVideoMode)                               = GameAddress + 0x1E75E9;
    *reinterpret_cast<void**>(&RwEngineGetTextureMemorySize)                       = GameAddress + 0x1E7629;
    *reinterpret_cast<void**>(&RwEngineGetMaxTextureSize)                          = GameAddress + 0x1E7671;
    *reinterpret_cast<void**>(&RwEngineSetFocus)                                   = GameAddress + 0x1E76B9;
    *reinterpret_cast<void**>(&RwEngineGetMetrics)                                 = GameAddress + 0x1E76F9;
    *reinterpret_cast<void**>(&RwOsGetFileInterface)                               = GameAddress + 0x1F2635;
    *reinterpret_cast<void**>(&RwErrorGet)                                         = GameAddress + 0x1F25F9;
    *reinterpret_cast<void**>(&RwErrorSet)                                         = GameAddress + 0x1F25A9;
    *reinterpret_cast<void**>(&_rwerror)                                           = GameAddress + 0x1F2631;
    *reinterpret_cast<void**>(&RwResourcesSetArenaSize)                            = GameAddress + 0x1F53A5;
    *reinterpret_cast<void**>(&RwResourcesGetArenaSize)                            = GameAddress + 0x1F54E5;
    *reinterpret_cast<void**>(&RwResourcesGetArenaUsage)                           = GameAddress + 0x1F5501;
    *reinterpret_cast<void**>(&RwResourcesEmptyArena)                              = GameAddress + 0x1F4FA1;
    *reinterpret_cast<void**>(&RwResourcesAllocateResEntry)                        = GameAddress + 0x1F51C5;
    *reinterpret_cast<void**>(&RwResourcesFreeResEntry)                            = GameAddress + 0x1F50B9;
    *reinterpret_cast<void**>(&_rwResourcesPurge)                                  = GameAddress + 0x1F5121;
    *reinterpret_cast<void**>(&RwStreamFindChunk)                                  = GameAddress + 0x1F1FBB;
    *reinterpret_cast<void**>(&_rwStreamWriteVersionedChunkHeader)                 = GameAddress + 0x1F1F83;
    *reinterpret_cast<void**>(&RwStreamWriteReal)                                  = GameAddress + 0x1F2095;
    *reinterpret_cast<void**>(&RwStreamWriteInt32)                                 = GameAddress + 0x1F2109;
    *reinterpret_cast<void**>(&RwStreamWriteInt16)                                 = GameAddress + 0x1F2117;
    *reinterpret_cast<void**>(&RwStreamReadReal)                                   = GameAddress + 0x1F214F;
    *reinterpret_cast<void**>(&RwStreamReadInt32)                                  = GameAddress + 0x1F2179;
    *reinterpret_cast<void**>(&RwStreamReadInt16)                                  = GameAddress + 0x1F2125;
    *reinterpret_cast<void**>(&RwStreamReadChunkHeaderInfo)                        = GameAddress + 0x1F21A5;
    *reinterpret_cast<void**>(&RxHeapCreate)                                       = GameAddress + 0x1F1689;
    *reinterpret_cast<void**>(&RxHeapDestroy)                                      = GameAddress + 0x1F1621;
    *reinterpret_cast<void**>(&_rxHeapReset)                                       = GameAddress + 0x1F1511;
    *reinterpret_cast<void**>(&RxHeapAlloc)                                        = GameAddress + 0x1F1185;
    *reinterpret_cast<void**>(&RxHeapFree)                                         = GameAddress + 0x1F0FE5;
    *reinterpret_cast<void**>(&RxHeapRealloc)                                      = GameAddress + 0x1F13E1;
    *reinterpret_cast<void**>(&RxPipelineSetFreeListCreateParams)                  = GameAddress + 0x1EE1B5;
    *reinterpret_cast<void**>(&_rxPipelineOpen)                                    = GameAddress + 0x1EE1CD;
    *reinterpret_cast<void**>(&_rxPipelineClose)                                   = GameAddress + 0x1EE155;
    *reinterpret_cast<void**>(&RxPipelineCreate)                                   = GameAddress + 0x1EE8C5;
    *reinterpret_cast<void**>(&_rxPipelineDestroy)                                 = GameAddress + 0x1EE929;
    *reinterpret_cast<void**>(&RxHeapGetGlobalHeap)                                = GameAddress + 0x1EE505;
    *reinterpret_cast<void**>(&RxPipelineExecute)                                  = GameAddress + 0x1EE839;
    *reinterpret_cast<void**>(&RxPacketCreate)                                     = GameAddress + 0x1EE515;
    *reinterpret_cast<void**>(&RxClusterSetStride)                                 = GameAddress + 0x1EE539;
    *reinterpret_cast<void**>(&RxClusterSetExternalData)                           = GameAddress + 0x1EE53D;
    *reinterpret_cast<void**>(&RxClusterSetData)                                   = GameAddress + 0x1EE591;
    *reinterpret_cast<void**>(&_rxPacketDestroy)                                   = GameAddress + 0x1EE035;
    *reinterpret_cast<void**>(&RxClusterInitializeData)                            = GameAddress + 0x1EE5E5;
    *reinterpret_cast<void**>(&RxClusterResizeData)                                = GameAddress + 0x1EE641;
    *reinterpret_cast<void**>(&RxClusterDestroyData)                               = GameAddress + 0x1EE67D;
    *reinterpret_cast<void**>(&RxClusterLockWrite)                                 = GameAddress + 0x1EE6A9;
    *reinterpret_cast<void**>(&RxClusterUnlock)                                    = GameAddress + 0x1EE755;
    *reinterpret_cast<void**>(&RxPipelineNodeSendConfigMsg)                        = GameAddress + 0x1EE757;
    *reinterpret_cast<void**>(&RxPipelineNodeForAllConnectedOutputs)               = GameAddress + 0x1EE775;
    *reinterpret_cast<void**>(&RxPipelineNodeGetPipelineCluster)                   = GameAddress + 0x1EE7E5;
    *reinterpret_cast<void**>(&RxPipelineClusterGetCreationAttributes)             = GameAddress + 0x1EE80B;
    *reinterpret_cast<void**>(&RxPipelineClusterSetCreationAttributes)             = GameAddress + 0x1EE817;
    *reinterpret_cast<void**>(&RxClusterGetAttributes)                             = GameAddress + 0x1EE821;
    *reinterpret_cast<void**>(&RxClusterSetAttributes)                             = GameAddress + 0x1EE82D;
    *reinterpret_cast<void**>(&RxPipelineNodeFindOutputByName)                     = GameAddress + 0x1EED51;
    *reinterpret_cast<void**>(&RxPipelineNodeFindOutputByIndex)                    = GameAddress + 0x1EEDC1;
    *reinterpret_cast<void**>(&RxPipelineNodeFindInput)                            = GameAddress + 0x1EEDDB;
    *reinterpret_cast<void**>(&RxPipelineNodeCloneDefinition)                      = GameAddress + 0x1EEA95;
    *reinterpret_cast<void**>(&RxPipelineNodeRequestCluster)                       = GameAddress + 0x1EEDEB;
    *reinterpret_cast<void**>(&RxPipelineNodeReplaceCluster)                       = GameAddress + 0x1EEE4F;
    *reinterpret_cast<void**>(&RxPipelineNodeGetInitData)                          = GameAddress + 0x1EEF2D;
    *reinterpret_cast<void**>(&RxPipelineNodeCreateInitData)                       = GameAddress + 0x1EEEC1;
    *reinterpret_cast<void**>(&RxPipelineClone)                                    = GameAddress + 0x1EF715;
    *reinterpret_cast<void**>(&RxPipelineFindNodeByName)                           = GameAddress + 0x1EF929;
    *reinterpret_cast<void**>(&RxPipelineFindNodeByIndex)                          = GameAddress + 0x1EF9B1;
    *reinterpret_cast<void**>(&RxPipelineLock)                                     = GameAddress + 0x1EF559;
    *reinterpret_cast<void**>(&RxLockedPipeUnlock)                                 = GameAddress + 0x1EEF31;
    *reinterpret_cast<void**>(&RxLockedPipeReplaceNode)                            = GameAddress + 0x1EFCF3;
    *reinterpret_cast<void**>(&RxLockedPipeDeleteNode)                             = GameAddress + 0x1EFDF3;
    *reinterpret_cast<void**>(&RxLockedPipeSetEntryPoint)                          = GameAddress + 0x1EFE1F;
    *reinterpret_cast<void**>(&RxLockedPipeGetEntryPoint)                          = GameAddress + 0x1EFE63;
    *reinterpret_cast<void**>(&RxLockedPipeAddPath)                                = GameAddress + 0x1EFC91;
    *reinterpret_cast<void**>(&RxLockedPipeDeletePath)                             = GameAddress + 0x1EFE89;
    *reinterpret_cast<void**>(&RxPipelineInsertDebugNode)                          = GameAddress + 0x1EFEC5;
    *reinterpret_cast<void**>(&RwRasterSetFreeListCreateParams)                    = GameAddress + 0x1EAAF9;
    *reinterpret_cast<void**>(&RwRasterCreate)                                     = GameAddress + 0x1EA9D1;
    *reinterpret_cast<void**>(&RwRasterDestroy)                                    = GameAddress + 0x1EA7D1;
    *reinterpret_cast<void**>(&RwRasterGetOffset)                                  = GameAddress + 0x1EA6AD;
    *reinterpret_cast<void**>(&RwRasterGetNumLevels)                               = GameAddress + 0x1EA901;
    *reinterpret_cast<void**>(&RwRasterSubRaster)                                  = GameAddress + 0x1EA975;
    *reinterpret_cast<void**>(&RwRasterRenderFast)                                 = GameAddress + 0x1EA735;
    *reinterpret_cast<void**>(&RwRasterRender)                                     = GameAddress + 0x1EA781;
    *reinterpret_cast<void**>(&RwRasterRenderScaled)                               = GameAddress + 0x1EA68D;
    *reinterpret_cast<void**>(&RwRasterPushContext)                                = GameAddress + 0x1EA819;
    *reinterpret_cast<void**>(&RwRasterPopContext)                                 = GameAddress + 0x1EA8B9;
    *reinterpret_cast<void**>(&RwRasterGetCurrentContext)                          = GameAddress + 0x1EA66D;
    *reinterpret_cast<void**>(&RwRasterClear)                                      = GameAddress + 0x1EA6DD;
    *reinterpret_cast<void**>(&RwRasterClearRect)                                  = GameAddress + 0x1EA761;
    *reinterpret_cast<void**>(&RwRasterShowRaster)                                 = GameAddress + 0x1EA93D;
    *reinterpret_cast<void**>(&RwRasterLock)                                       = GameAddress + 0x1EAA75;
    *reinterpret_cast<void**>(&RwRasterUnlock)                                     = GameAddress + 0x1EA6B9;
    *reinterpret_cast<void**>(&RwRasterLockPalette)                                = GameAddress + 0x1EA88D;
    *reinterpret_cast<void**>(&RwRasterUnlockPalette)                              = GameAddress + 0x1EA7AD;
    *reinterpret_cast<void**>(&RwRasterRegisterPlugin)                             = GameAddress + 0x1EA865;
    *reinterpret_cast<void**>(&RwRasterGetPluginOffset)                            = GameAddress + 0x1EA65D;
    *reinterpret_cast<void**>(&RxRenderStateVectorSetDefaultRenderStateVector)     = GameAddress + 0x1F1741;
    *reinterpret_cast<void**>(&RwImageCreate)                                      = GameAddress + 0x1E8E21;
    *reinterpret_cast<void**>(&RwImageDestroy)                                     = GameAddress + 0x1E8E79;
    *reinterpret_cast<void**>(&RwImageAllocatePixels)                              = GameAddress + 0x1E8F05;
    *reinterpret_cast<void**>(&RwImageFreePixels)                                  = GameAddress + 0x1E8ED9;
    *reinterpret_cast<void**>(&RwImageApplyMask)                                   = GameAddress + 0x1E9281;
    *reinterpret_cast<void**>(&RwImageMakeMask)                                    = GameAddress + 0x1E90C9;
    *reinterpret_cast<void**>(&RwImageReadMaskedImage)                             = GameAddress + 0x1E9DDD;
    *reinterpret_cast<void**>(&RwImageRead)                                        = GameAddress + 0x1E97AD;
    *reinterpret_cast<void**>(&RwImageSetPath)                                     = GameAddress + 0x1E96C5;
    *reinterpret_cast<void**>(&RwImageSetGamma)                                    = GameAddress + 0x1E8B75;
    *reinterpret_cast<void**>(&RwImageGammaCorrect)                                = GameAddress + 0x1EA331;
    // *reinterpret_cast<void**>(&RwPalQuantInit)                                     = GameAddress + 0x0;
    // *reinterpret_cast<void**>(&RwPalQuantTerm)                                     = GameAddress + 0x0;
    // *reinterpret_cast<void**>(&RwPalQuantAddImage)                                 = GameAddress + 0x0;
    // *reinterpret_cast<void**>(&RwPalQuantResolvePalette)                           = GameAddress + 0x0;
    // *reinterpret_cast<void**>(&RwPalQuantMatchImage)                               = GameAddress + 0x0;
    *reinterpret_cast<void**>(&RwTextureSetMipmapping)                             = GameAddress + 0x1EB41D;
    *reinterpret_cast<void**>(&RwTextureGetMipmapping)                             = GameAddress + 0x1EB43D;
    *reinterpret_cast<void**>(&RwTextureSetAutoMipmapping)                         = GameAddress + 0x1EB459;
    *reinterpret_cast<void**>(&RwTextureGetAutoMipmapping)                         = GameAddress + 0x1EB479;
    *reinterpret_cast<void**>(&RwTextureSetMipmapGenerationCallBack)               = GameAddress + 0x1EBB61;
    *reinterpret_cast<void**>(&RwTextureGetMipmapGenerationCallBack)               = GameAddress + 0x1EBB81;
    *reinterpret_cast<void**>(&RwTextureSetMipmapNameCallBack)                     = GameAddress + 0x1EBB9D;
    *reinterpret_cast<void**>(&RwTextureGetMipmapNameCallBack)                     = GameAddress + 0x1EBBBD;
    *reinterpret_cast<void**>(&RwTextureGenerateMipmapName)                        = GameAddress + 0x1EBA01;
    *reinterpret_cast<void**>(&RwTextureRasterGenerateMipmaps)                     = GameAddress + 0x1EBBD9;
    *reinterpret_cast<void**>(&_rwTextureSetAutoMipMapState)                       = GameAddress + 0x1EB495;
    *reinterpret_cast<void**>(&_rwTextureGetAutoMipMapState)                       = GameAddress + 0x1EB4B9;
    *reinterpret_cast<void**>(&RwTextureGetReadCallBack)                           = GameAddress + 0x1EB401;
    *reinterpret_cast<void**>(&RwTextureSetReadCallBack)                           = GameAddress + 0x1EB3E1;
    *reinterpret_cast<void**>(&RwTextureGetFindCallBack)                           = GameAddress + 0x1EB3C5;
    *reinterpret_cast<void**>(&RwTextureSetFindCallBack)                           = GameAddress + 0x1EB3A5;
    *reinterpret_cast<void**>(&RwTextureSetName)                                   = GameAddress + 0x1EB821;
    *reinterpret_cast<void**>(&RwTextureSetMaskName)                               = GameAddress + 0x1EB885;
    *reinterpret_cast<void**>(&RwTexDictionarySetFreeListCreateParams)             = GameAddress + 0x1EBD19;
    *reinterpret_cast<void**>(&RwTexDictionaryCreate)                              = GameAddress + 0x1EB501;
    *reinterpret_cast<void**>(&RwTexDictionaryDestroy)                             = GameAddress + 0x1EB589;
    *reinterpret_cast<void**>(&RwTextureCreate)                                    = GameAddress + 0x1EB7BD;
    *reinterpret_cast<void**>(&RwTextureDestroy)                                   = GameAddress + 0x1EB6E5;
    *reinterpret_cast<void**>(&RwTextureSetRaster)                                 = GameAddress + 0x1EB4D5;
    *reinterpret_cast<void**>(&RwTexDictionaryAddTexture)                          = GameAddress + 0x1EB8E9;
    *reinterpret_cast<void**>(&RwTexDictionaryRemoveTexture)                       = GameAddress + 0x1EB917;
    *reinterpret_cast<void**>(&RwTexDictionaryFindNamedTexture)                    = GameAddress + 0x1EB931;
    *reinterpret_cast<void**>(&RwTexDictionaryGetCurrent)                          = GameAddress + 0x1EB9E5;
    *reinterpret_cast<void**>(&RwTexDictionarySetCurrent)                          = GameAddress + 0x1EB9C9;
    *reinterpret_cast<void**>(&RwTexDictionaryForAllTextures)                      = GameAddress + 0x1EB6B5;
    *reinterpret_cast<void**>(&RwTexDictionaryForAllTexDictionaries)               = GameAddress + 0x1EB77D;
    *reinterpret_cast<void**>(&RwTextureRegisterPlugin)                            = GameAddress + 0x1EBAE1;
    *reinterpret_cast<void**>(&RwTexDictionaryRegisterPlugin)                      = GameAddress + 0x1EBB21;
    *reinterpret_cast<void**>(&RwTextureGetPluginOffset)                           = GameAddress + 0x1EBB0D;
    *reinterpret_cast<void**>(&RwTexDictionaryGetPluginOffset)                     = GameAddress + 0x1EBB4D;
    *reinterpret_cast<void**>(&RwTextureValidatePlugins)                           = GameAddress + 0x1EBB1D;
    *reinterpret_cast<void**>(&RwTexDictionaryValidatePlugins)                     = GameAddress + 0x1EBB5D;
    *reinterpret_cast<void**>(&_rwIm3DGetPool)                                     = GameAddress + 0x1ED76D;
    *reinterpret_cast<void**>(&RwIm3DTransform)                                    = GameAddress + 0x1ECFAD;
    *reinterpret_cast<void**>(&RwIm3DEnd)                                          = GameAddress + 0x1ED03D;
    *reinterpret_cast<void**>(&RwIm3DRenderLine)                                   = GameAddress + 0x1ED3B5;
    *reinterpret_cast<void**>(&RwIm3DRenderTriangle)                               = GameAddress + 0x1ED309;
    *reinterpret_cast<void**>(&RwIm3DRenderIndexedPrimitive)                       = GameAddress + 0x1ED085;
    *reinterpret_cast<void**>(&RwIm3DRenderPrimitive)                              = GameAddress + 0x1ED1C5;
    *reinterpret_cast<void**>(&RwIm3DGetTransformPipeline)                         = GameAddress + 0x1ED449;
    *reinterpret_cast<void**>(&RwIm3DGetRenderPipeline)                            = GameAddress + 0x1ED465;
    *reinterpret_cast<void**>(&RwIm3DSetTransformPipeline)                         = GameAddress + 0x1ED549;
    *reinterpret_cast<void**>(&RwIm3DSetRenderPipeline)                            = GameAddress + 0x1ED589;
    *reinterpret_cast<void**>(&_rwDeviceRegisterPlugin)                            = GameAddress + 0x1C10F9;
    *reinterpret_cast<void**>(&RwImageResample)                                    = GameAddress + 0x1EAC01;
    *reinterpret_cast<void**>(&RwImageCreateResample)                              = GameAddress + 0x1EAE91;
    *reinterpret_cast<void**>(&RwImageSetFromRaster)                               = GameAddress + 0x1EA455;
    *reinterpret_cast<void**>(&RwRasterSetFromImage)                               = GameAddress + 0x1EA479;
    *reinterpret_cast<void**>(&RwRasterRead)                                       = GameAddress + 0x1EA575;
    *reinterpret_cast<void**>(&RwRasterReadMaskedRaster)                           = GameAddress + 0x1EA615;
    *reinterpret_cast<void**>(&RwImageFindRasterFormat)                            = GameAddress + 0x1EA49D;
    *reinterpret_cast<void**>(&RwFrameForAllObjects)                               = GameAddress + 0x1E8859;
    *reinterpret_cast<void**>(&RwFrameTranslate)                                   = GameAddress + 0x1E8615;
    *reinterpret_cast<void**>(&RwFrameRotate)                                      = GameAddress + 0x1E8729;
    *reinterpret_cast<void**>(&RwFrameScale)                                       = GameAddress + 0x1E8671;
    *reinterpret_cast<void**>(&RwFrameTransform)                                   = GameAddress + 0x1E86CD;
    *reinterpret_cast<void**>(&RwFrameOrthoNormalize)                              = GameAddress + 0x1E87FD;
    *reinterpret_cast<void**>(&RwFrameSetIdentity)                                 = GameAddress + 0x1E8785;
    *reinterpret_cast<void**>(&RwFrameCloneHierarchy)                              = GameAddress + 0x1E80BD;
    *reinterpret_cast<void**>(&RwFrameDestroyHierarchy)                            = GameAddress + 0x1E8429;
    *reinterpret_cast<void**>(&RwFrameForAllChildren)                              = GameAddress + 0x1E85C9;
    *reinterpret_cast<void**>(&RwFrameRemoveChild)                                 = GameAddress + 0x1E8371;
    *reinterpret_cast<void**>(&RwFrameAddChild)                                    = GameAddress + 0x1E84BD;
    *reinterpret_cast<void**>(&RwFrameGetRoot)                                     = GameAddress + 0x1E84B7;
    *reinterpret_cast<void**>(&RwFrameGetLTM)                                      = GameAddress + 0x1E849D;
    *reinterpret_cast<void**>(&RwFrameUpdateObjects)                               = GameAddress + 0x1E802D;
    *reinterpret_cast<void**>(&RwFrameSetFreeListCreateParams)                     = GameAddress + 0x1E7DDD;
    *reinterpret_cast<void**>(&RwFrameCreate)                                      = GameAddress + 0x1E81AD;
    *reinterpret_cast<void**>(&RwFrameDestroy)                                     = GameAddress + 0x1E83ED;
    *reinterpret_cast<void**>(&_rwFrameInit)                                       = GameAddress + 0x1E8141;
    *reinterpret_cast<void**>(&_rwFrameDeInit)                                     = GameAddress + 0x1E82B9;
    *reinterpret_cast<void**>(&RwFrameDirty)                                       = GameAddress + 0x1E8135;
    *reinterpret_cast<void**>(&RwFrameCount)                                       = GameAddress + 0x1E85F3;
    *reinterpret_cast<void**>(&RwFrameRegisterPlugin)                              = GameAddress + 0x1E889D;
    *reinterpret_cast<void**>(&RwFrameGetPluginOffset)                             = GameAddress + 0x1E88C9;
    *reinterpret_cast<void**>(&RwFrameValidatePlugins)                             = GameAddress + 0x1E88D9;
    *reinterpret_cast<void**>(&_rwFrameCloneAndLinkClones)                         = GameAddress + 0x1E7EC9;
    *reinterpret_cast<void**>(&_rwFramePurgeClone)                                 = GameAddress + 0x1E8079;
    *reinterpret_cast<void**>(&_rwFrameSyncDirty)                                  = GameAddress + 0x1EB109;
    *reinterpret_cast<void**>(&_rwFrameSyncHierarchyLTM)                           = GameAddress + 0x1EB1E9;
    *reinterpret_cast<void**>(&RwTextureRegisterPluginStream)                      = GameAddress + 0x1E51A9;
    *reinterpret_cast<void**>(&RwTextureSetStreamAlwaysCallBack)                   = GameAddress + 0x1E51CD;
    *reinterpret_cast<void**>(&RwTextureStreamGetSize)                             = GameAddress + 0x1E51E1;
    *reinterpret_cast<void**>(&RwTextureStreamRead)                                = GameAddress + 0x1E5391;
    *reinterpret_cast<void**>(&RwTextureStreamWrite)                               = GameAddress + 0x1E5239;
    *reinterpret_cast<void**>(&RwTexDictionaryRegisterPluginStream)                = GameAddress + 0x1E54CD;
    *reinterpret_cast<void**>(&RwTexDictionarySetStreamAlwaysCallBack)             = GameAddress + 0x1E54F1;
    *reinterpret_cast<void**>(&RwTexDictionaryStreamGetSize)                       = GameAddress + 0x1E5505;
    *reinterpret_cast<void**>(&RwTexDictionaryStreamRead)                          = GameAddress + 0x1E5731;
    *reinterpret_cast<void**>(&RwTexDictionaryStreamWrite)                         = GameAddress + 0x1E55A9;
    *reinterpret_cast<void**>(&_rwTextureChunkInfoRead)                            = GameAddress + 0x1E58BF;
    *reinterpret_cast<void**>(&RwFrameRegisterPluginStream)                        = GameAddress + 0x1E4955;
    *reinterpret_cast<void**>(&RwFrameSetStreamAlwaysCallBack)                     = GameAddress + 0x1E4979;
    *reinterpret_cast<void**>(&_rwFrameListInitialize)                             = GameAddress + 0x1E498D;
    *reinterpret_cast<void**>(&_rwFrameListFindFrame)                              = GameAddress + 0x1E4A1F;
    *reinterpret_cast<void**>(&_rwFrameListDeinitialize)                           = GameAddress + 0x1E4A4D;
    *reinterpret_cast<void**>(&_rwFrameListStreamGetSize)                          = GameAddress + 0x1E4A75;
    *reinterpret_cast<void**>(&_rwFrameListStreamRead)                             = GameAddress + 0x1E4C89;
    *reinterpret_cast<void**>(&_rwFrameListStreamWrite)                            = GameAddress + 0x1E4AC5;
    *reinterpret_cast<void**>(&RwBBoxCalculate)                                    = GameAddress + 0x1E44DD;
    *reinterpret_cast<void**>(&RwBBoxInitialize)                                   = GameAddress + 0x1E4595;
    *reinterpret_cast<void**>(&RwBBoxAddPoint)                                     = GameAddress + 0x1E45AF;
    *reinterpret_cast<void**>(&RwBBoxContainsPoint)                                = GameAddress + 0x1E4635;
    *reinterpret_cast<void**>(&RwCameraBeginUpdate)                                = GameAddress + 0x1E5A19;
    *reinterpret_cast<void**>(&RwCameraEndUpdate)                                  = GameAddress + 0x1E5A15;
    *reinterpret_cast<void**>(&RwCameraClear)                                      = GameAddress + 0x1E5CF1;
    *reinterpret_cast<void**>(&RwCameraShowRaster)                                 = GameAddress + 0x1E5D15;
    *reinterpret_cast<void**>(&RwCameraSetFreeListCreateParams)                    = GameAddress + 0x1E5981;
    *reinterpret_cast<void**>(&RwCameraDestroy)                                    = GameAddress + 0x1E5EA1;
    *reinterpret_cast<void**>(&RwCameraCreate)                                     = GameAddress + 0x1E5EE1;
    *reinterpret_cast<void**>(&RwCameraClone)                                      = GameAddress + 0x1E6EB5;
    *reinterpret_cast<void**>(&RwCameraSetViewOffset)                              = GameAddress + 0x1E5A1D;
    *reinterpret_cast<void**>(&RwCameraSetViewWindow)                              = GameAddress + 0x1E5E05;
    *reinterpret_cast<void**>(&RwCameraSetProjection)                              = GameAddress + 0x1E5D29;
    *reinterpret_cast<void**>(&RwCameraSetNearClipPlane)                           = GameAddress + 0x1E5A39;
    *reinterpret_cast<void**>(&RwCameraSetFarClipPlane)                            = GameAddress + 0x1E5ACD;
    *reinterpret_cast<void**>(&RwCameraRegisterPlugin)                             = GameAddress + 0x1E5E61;
    *reinterpret_cast<void**>(&RwCameraGetPluginOffset)                            = GameAddress + 0x1E5E8D;
    *reinterpret_cast<void**>(&RwCameraValidatePlugins)                            = GameAddress + 0x1E5E9D;
    *reinterpret_cast<void**>(&RwCameraFrustumTestSphere)                          = GameAddress + 0x1E5B61;
    *reinterpret_cast<void**>(&RwCameraRegisterPluginStream)                       = GameAddress + 0x1E46A5;
    *reinterpret_cast<void**>(&RwCameraSetStreamAlwaysCallBack)                    = GameAddress + 0x1E46C9;
    *reinterpret_cast<void**>(&RwCameraStreamGetSize)                              = GameAddress + 0x1E46DD;
    *reinterpret_cast<void**>(&RwCameraStreamRead)                                 = GameAddress + 0x1E47C9;
    *reinterpret_cast<void**>(&RwCameraStreamWrite)                                = GameAddress + 0x1E46F5;
    *reinterpret_cast<void**>(&RwCameraChunkInfoRead)                              = GameAddress + 0x1E48BD;
    *reinterpret_cast<void**>(&RpMaterialSetFreeListCreateParams)                  = GameAddress + 0x227091;
    *reinterpret_cast<void**>(&RpMaterialCreate)                                   = GameAddress + 0x227171;
    *reinterpret_cast<void**>(&RpMaterialDestroy)                                  = GameAddress + 0x2271D1;
    *reinterpret_cast<void**>(&RpMaterialClone)                                    = GameAddress + 0x22724D;
    *reinterpret_cast<void**>(&RpMaterialSetTexture)                               = GameAddress + 0x227225;
    *reinterpret_cast<void**>(&RpMaterialRegisterPlugin)                           = GameAddress + 0x227301;
    *reinterpret_cast<void**>(&RpMaterialRegisterPluginStream)                     = GameAddress + 0x227329;
    *reinterpret_cast<void**>(&RpMaterialSetStreamAlwaysCallBack)                  = GameAddress + 0x227349;
    *reinterpret_cast<void**>(&RpMaterialSetStreamRightsCallBack)                  = GameAddress + 0x227359;
    *reinterpret_cast<void**>(&RpMaterialGetPluginOffset)                          = GameAddress + 0x227369;
    *reinterpret_cast<void**>(&RpMaterialValidatePlugins)                          = GameAddress + 0x227379;
    *reinterpret_cast<void**>(&RpMaterialStreamGetSize)                            = GameAddress + 0x2275F9;
    *reinterpret_cast<void**>(&RpMaterialStreamRead)                               = GameAddress + 0x2273FD;
    *reinterpret_cast<void**>(&RpMaterialStreamWrite)                              = GameAddress + 0x227621;
    *reinterpret_cast<void**>(&_rpMaterialChunkInfoRead)                           = GameAddress + 0x22737D;
    *reinterpret_cast<void**>(&_rpMaterialListInitialize)                          = GameAddress + 0x227745;
    *reinterpret_cast<void**>(&_rpMaterialListDeinitialize)                        = GameAddress + 0x2276ED;
    *reinterpret_cast<void**>(&_rpMaterialListAlloc)                               = GameAddress + 0x227751;
    *reinterpret_cast<void**>(&_rpMaterialListGetMaterial)                         = GameAddress + 0x227819;
    *reinterpret_cast<void**>(&_rpMaterialListSetSize)                             = GameAddress + 0x227821;
    *reinterpret_cast<void**>(&_rpMaterialListCopy)                                = GameAddress + 0x227765;
    *reinterpret_cast<void**>(&_rpMaterialListAppendMaterial)                      = GameAddress + 0x227885;
    *reinterpret_cast<void**>(&_rpMaterialListFindMaterialIndex)                   = GameAddress + 0x227911;
    *reinterpret_cast<void**>(&_rpMaterialListStreamGetSize)                       = GameAddress + 0x22792D;
    *reinterpret_cast<void**>(&_rpMaterialListStreamRead)                          = GameAddress + 0x227AC9;
    *reinterpret_cast<void**>(&_rpMaterialListStreamWrite)                         = GameAddress + 0x227989;
    *reinterpret_cast<void**>(&_rpMeshOpen)                                        = GameAddress + 0x227E25;
    *reinterpret_cast<void**>(&_rpMeshClose)                                       = GameAddress + 0x227DED;
    *reinterpret_cast<void**>(&_rpMeshGetNextSerialNumber)                         = GameAddress + 0x2285F5;
    *reinterpret_cast<void**>(&_rpBuildMeshCreate)                                 = GameAddress + 0x227F0D;
    *reinterpret_cast<void**>(&_rpBuildMeshDestroy)                                = GameAddress + 0x227FB9;
    *reinterpret_cast<void**>(&_rpMeshDestroy)                                     = GameAddress + 0x227FFD;
    *reinterpret_cast<void**>(&_rpBuildMeshAddTriangle)                            = GameAddress + 0x228049;
    *reinterpret_cast<void**>(&_rpMeshHeaderForAllMeshes)                          = GameAddress + 0x228105;
    *reinterpret_cast<void**>(&_rpMeshWrite)                                       = GameAddress + 0x22813B;
    *reinterpret_cast<void**>(&_rpMeshRead)                                        = GameAddress + 0x22835D;
    *reinterpret_cast<void**>(&_rpMeshSize)                                        = GameAddress + 0x2285B5;
    *reinterpret_cast<void**>(&_rpMeshHeaderDestroy)                               = GameAddress + 0x227DA5;
    *reinterpret_cast<void**>(&_rpMeshHeaderCreate)                                = GameAddress + 0x227DD1;
    *reinterpret_cast<void**>(&RpTriStripPolygonFollowStrip)                       = GameAddress + 0x229FAF;
    *reinterpret_cast<void**>(&RpTriStripDefaultCost)                              = GameAddress + 0x229D97;
    *reinterpret_cast<void**>(&RpTriStripMeshTunnel)                               = GameAddress + 0x229FF5;
    *reinterpret_cast<void**>(&RpTriStripMeshQuick)                                = GameAddress + 0x22A5CD;
    *reinterpret_cast<void**>(&RpBuildMeshGenerateTriStrip)                        = GameAddress + 0x22AB91;
    *reinterpret_cast<void**>(&RpBuildMeshGenerateTrivialTriStrip)                 = GameAddress + 0x228615;
    *reinterpret_cast<void**>(&RpBuildMeshGenerateDefaultTriStrip)                 = GameAddress + 0x228691;
    *reinterpret_cast<void**>(&RpBuildMeshGeneratePreprocessTriStrip)              = GameAddress + 0x229311;
    *reinterpret_cast<void**>(&RpBuildMeshGenerateExhaustiveTriStrip)              = GameAddress + 0x229321;
    *reinterpret_cast<void**>(&RpBuildMeshGenerateDefaultIgnoreWindingTriStrip)    = GameAddress + 0x229309;
    *reinterpret_cast<void**>(&RpBuildMeshGeneratePreprocessIgnoreWindingTriStrip) = GameAddress + 0x229319;
    *reinterpret_cast<void**>(&RpBuildMeshGenerateExhaustiveIgnoreWindingTriStrip) = GameAddress + 0x229D91;
    *reinterpret_cast<void**>(&RpMeshSetTriStripMethod)                            = GameAddress + 0x22B8B5;
    *reinterpret_cast<void**>(&RpMeshGetTriStripMethod)                            = GameAddress + 0x22B8D9;
    *reinterpret_cast<void**>(&_rpTriListMeshGenerate)                             = GameAddress + 0x22B8F9;
    *reinterpret_cast<void**>(&_rpMeshOptimise)                                    = GameAddress + 0x22BCCD;
    *reinterpret_cast<void**>(&RpGeometryTransform)                                = GameAddress + 0x225749;
    *reinterpret_cast<void**>(&RpGeometryCreateSpace)                              = GameAddress + 0x2259F9;
    *reinterpret_cast<void**>(&RpMorphTargetCalcBoundingSphere)                    = GameAddress + 0x225809;
    *reinterpret_cast<void**>(&RpGeometryAddMorphTargets)                          = GameAddress + 0x225C09;
    *reinterpret_cast<void**>(&RpGeometryAddMorphTarget)                           = GameAddress + 0x225D59;
    *reinterpret_cast<void**>(&RpGeometryRemoveMorphTarget)                        = GameAddress + 0x225D5D;
    *reinterpret_cast<void**>(&RpGeometryTriangleSetVertexIndices)                 = GameAddress + 0x225EA9;
    *reinterpret_cast<void**>(&RpGeometryTriangleSetMaterial)                      = GameAddress + 0x225EB7;
    *reinterpret_cast<void**>(&RpGeometryTriangleGetVertexIndices)                 = GameAddress + 0x225EF9;
    *reinterpret_cast<void**>(&RpGeometryTriangleGetMaterial)                      = GameAddress + 0x225F1F;
    *reinterpret_cast<void**>(&RpGeometryForAllMaterials)                          = GameAddress + 0x225F31;
    *reinterpret_cast<void**>(&RpGeometryLock)                                     = GameAddress + 0x2257DF;
    *reinterpret_cast<void**>(&RpGeometryUnlock)                                   = GameAddress + 0x2258D1;
    *reinterpret_cast<void**>(&RpGeometryForAllMeshes)                             = GameAddress + 0x225F61;
    *reinterpret_cast<void**>(&RpGeometryCreate)                                   = GameAddress + 0x225A41;
    *reinterpret_cast<void**>(&RpGeometryDestroy)                                  = GameAddress + 0x225961;
    *reinterpret_cast<void**>(&RpGeometryRegisterPlugin)                           = GameAddress + 0x225F89;
    *reinterpret_cast<void**>(&RpGeometryRegisterPluginStream)                     = GameAddress + 0x225FB1;
    *reinterpret_cast<void**>(&RpGeometrySetStreamAlwaysCallBack)                  = GameAddress + 0x225FD1;
    *reinterpret_cast<void**>(&RpGeometryGetPluginOffset)                          = GameAddress + 0x225FE1;
    *reinterpret_cast<void**>(&RpGeometryValidatePlugins)                          = GameAddress + 0x225FF1;
    *reinterpret_cast<void**>(&RpGeometryStreamGetSize)                            = GameAddress + 0x225FF5;
    *reinterpret_cast<void**>(&RpGeometryStreamWrite)                              = GameAddress + 0x226155;
    *reinterpret_cast<void**>(&RpGeometryStreamRead)                               = GameAddress + 0x226449;
    *reinterpret_cast<void**>(&_rpGeometryChunkInfoRead)                           = GameAddress + 0x2266D1;
    *reinterpret_cast<void**>(&RpWorldSectorRender)                                = GameAddress + 0x22C745;
    *reinterpret_cast<void**>(&RpWorldSectorForAllMeshes)                          = GameAddress + 0x22C759;
    *reinterpret_cast<void**>(&RpWorldSectorRegisterPlugin)                        = GameAddress + 0x22C779;
    *reinterpret_cast<void**>(&RpWorldSectorRegisterPluginStream)                  = GameAddress + 0x22C7A5;
    *reinterpret_cast<void**>(&RpWorldSectorSetStreamAlwaysCallBack)               = GameAddress + 0x22C7C9;
    *reinterpret_cast<void**>(&RpWorldSectorSetStreamRightsCallBack)               = GameAddress + 0x22C7DD;
    *reinterpret_cast<void**>(&RpWorldSectorGetPluginOffset)                       = GameAddress + 0x22C7F1;
    *reinterpret_cast<void**>(&RpWorldSectorValidatePlugins)                       = GameAddress + 0x22C801;
    *reinterpret_cast<void**>(&RpLightSetFreeListCreateParams)                     = GameAddress + 0x226FD5;
    *reinterpret_cast<void**>(&RpLightCreate)                                      = GameAddress + 0x226DB1;
    *reinterpret_cast<void**>(&RpLightDestroy)                                     = GameAddress + 0x226EF5;
    *reinterpret_cast<void**>(&RpLightSetRadius)                                   = GameAddress + 0x226731;
    *reinterpret_cast<void**>(&RpLightSetColor)                                    = GameAddress + 0x226747;
    *reinterpret_cast<void**>(&RpLightGetConeAngle)                                = GameAddress + 0x226781;
    *reinterpret_cast<void**>(&RpLightSetConeAngle)                                = GameAddress + 0x226A25;
    *reinterpret_cast<void**>(&RpLightStreamGetSize)                               = GameAddress + 0x226ACD;
    *reinterpret_cast<void**>(&RpLightStreamRead)                                  = GameAddress + 0x226BC1;
    *reinterpret_cast<void**>(&_rpLightChunkInfoRead)                              = GameAddress + 0x226E65;
    *reinterpret_cast<void**>(&RpLightRegisterPlugin)                              = GameAddress + 0x226A61;
    *reinterpret_cast<void**>(&RpLightRegisterPluginStream)                        = GameAddress + 0x226A89;
    *reinterpret_cast<void**>(&RpLightSetStreamAlwaysCallBack)                     = GameAddress + 0x226AA9;
    *reinterpret_cast<void**>(&RpLightGetPluginOffset)                             = GameAddress + 0x226AB9;
    *reinterpret_cast<void**>(&RpLightValidatePlugins)                             = GameAddress + 0x226AC9;
    *reinterpret_cast<void**>(&RpAtomicSetFreeListCreateParams)                    = GameAddress + 0x223B9D;
    *reinterpret_cast<void**>(&RpClumpSetFreeListCreateParams)                     = GameAddress + 0x223BB5;
    *reinterpret_cast<void**>(&AtomicDefaultRenderCallBack)                        = GameAddress + 0x2238DD;
    *reinterpret_cast<void**>(&_rpAtomicResyncInterpolatedSphere)                  = GameAddress + 0x223915;
    *reinterpret_cast<void**>(&RpAtomicGetWorldBoundingSphere)                     = GameAddress + 0x223A19;
    *reinterpret_cast<void**>(&RpClumpForAllAtomics)                               = GameAddress + 0x223D67;
    *reinterpret_cast<void**>(&RpClumpForAllLights)                                = GameAddress + 0x223DBD;
    *reinterpret_cast<void**>(&RpClumpForAllCameras)                               = GameAddress + 0x223E25;
    *reinterpret_cast<void**>(&RpAtomicSetFrame)                                   = GameAddress + 0x2241D5;
    *reinterpret_cast<void**>(&RpClumpCreateSpace)                                 = GameAddress + 0x223E65;
    *reinterpret_cast<void**>(&RpClumpRender)                                      = GameAddress + 0x22425D;
    *reinterpret_cast<void**>(&RpClumpRemoveAtomic)                                = GameAddress + 0x224711;
    *reinterpret_cast<void**>(&RpClumpAddAtomic)                                   = GameAddress + 0x224245;
    *reinterpret_cast<void**>(&RpClumpRemoveLight)                                 = GameAddress + 0x224751;
    *reinterpret_cast<void**>(&RpClumpAddLight)                                    = GameAddress + 0x224725;
    *reinterpret_cast<void**>(&RpClumpRemoveCamera)                                = GameAddress + 0x2247AD;
    *reinterpret_cast<void**>(&RpClumpAddCamera)                                   = GameAddress + 0x224781;
    *reinterpret_cast<void**>(&RpClumpDestroy)                                     = GameAddress + 0x22458D;
    *reinterpret_cast<void**>(&RpClumpCreate)                                      = GameAddress + 0x2240F5;
    *reinterpret_cast<void**>(&RpClumpClone)                                       = GameAddress + 0x22444D;
    *reinterpret_cast<void**>(&RpAtomicDestroy)                                    = GameAddress + 0x22416D;
    *reinterpret_cast<void**>(&RpAtomicClone)                                      = GameAddress + 0x2242E1;
    *reinterpret_cast<void**>(&RpAtomicCreate)                                     = GameAddress + 0x224045;
    *reinterpret_cast<void**>(&RpAtomicSetGeometry)                                = GameAddress + 0x2241EB;
    *reinterpret_cast<void**>(&RpClumpSetCallBack)                                 = GameAddress + 0x2246E5;
    *reinterpret_cast<void**>(&RpClumpGetCallBack)                                 = GameAddress + 0x2246FD;
    *reinterpret_cast<void**>(&RpClumpGetNumAtomics)                               = GameAddress + 0x223D53;
    *reinterpret_cast<void**>(&RpClumpGetNumLights)                                = GameAddress + 0x223D95;
    *reinterpret_cast<void**>(&RpClumpGetNumCameras)                               = GameAddress + 0x223DFD;
    *reinterpret_cast<void**>(&RpLightGetClump)                                    = GameAddress + 0x2242C1;
    *reinterpret_cast<void**>(&RwCameraGetClump)                                   = GameAddress + 0x2242D1;
    *reinterpret_cast<void**>(&RpAtomicStreamGetSize)                              = GameAddress + 0x2247DD;
    *reinterpret_cast<void**>(&RpAtomicStreamRead)                                 = GameAddress + 0x224E5D;
    *reinterpret_cast<void**>(&RpAtomicStreamWrite)                                = GameAddress + 0x224A11;
    *reinterpret_cast<void**>(&RpClumpStreamGetSize)                               = GameAddress + 0x224801;
    *reinterpret_cast<void**>(&RpClumpStreamRead)                                  = GameAddress + 0x225109;
    *reinterpret_cast<void**>(&RpClumpStreamWrite)                                 = GameAddress + 0x224B29;
    *reinterpret_cast<void**>(&_rpClumpChunkInfoRead)                              = GameAddress + 0x225599;
    *reinterpret_cast<void**>(&RpAtomicRegisterPlugin)                             = GameAddress + 0x2255F5;
    *reinterpret_cast<void**>(&RpClumpRegisterPlugin)                              = GameAddress + 0x22561D;
    *reinterpret_cast<void**>(&RpAtomicRegisterPluginStream)                       = GameAddress + 0x225645;
    *reinterpret_cast<void**>(&RpAtomicSetStreamAlwaysCallBack)                    = GameAddress + 0x225665;
    *reinterpret_cast<void**>(&RpAtomicSetStreamRightsCallBack)                    = GameAddress + 0x225675;
    *reinterpret_cast<void**>(&RpClumpRegisterPluginStream)                        = GameAddress + 0x225685;
    *reinterpret_cast<void**>(&RpClumpSetStreamAlwaysCallBack)                     = GameAddress + 0x2256A5;
    *reinterpret_cast<void**>(&RpAtomicGetPluginOffset)                            = GameAddress + 0x2256B5;
    *reinterpret_cast<void**>(&RpClumpGetPluginOffset)                             = GameAddress + 0x2256C5;
    *reinterpret_cast<void**>(&RpAtomicValidatePlugins)                            = GameAddress + 0x2256D5;
    *reinterpret_cast<void**>(&RpClumpValidatePlugins)                             = GameAddress + 0x2256D9;
    *reinterpret_cast<void**>(&RpAtomicInstance)                                   = GameAddress + 0x2256DD;
    *reinterpret_cast<void**>(&_rpWorldFindBBox)                                   = GameAddress + 0x22C8B7;
    *reinterpret_cast<void**>(&_rpWorldSetupSectorBoundingBoxes)                   = GameAddress + 0x22C925;
    *reinterpret_cast<void**>(&_rpWorldForAllGlobalLights)                         = GameAddress + 0x22C84D;
    *reinterpret_cast<void**>(&_rpWorldSectorForAllLocalLights)                    = GameAddress + 0x22C885;
    *reinterpret_cast<void**>(&_rpSectorDefaultRenderCallBack)                     = GameAddress + 0x22C805;
    *reinterpret_cast<void**>(&RpWorldLock)                                        = GameAddress + 0x22CA99;
    *reinterpret_cast<void**>(&RpWorldUnlock)                                      = GameAddress + 0x22CAF1;
    *reinterpret_cast<void**>(&_rpWorldRegisterWorld)                              = GameAddress + 0x22C9DD;
    *reinterpret_cast<void**>(&_rpWorldUnregisterWorld)                            = GameAddress + 0x22CA39;
    *reinterpret_cast<void**>(&RpWorldPluginAttach)                                = GameAddress + 0x22D525;
    *reinterpret_cast<void**>(&RpWorldForAllClumps)                                = GameAddress + 0x22D3E7;
    *reinterpret_cast<void**>(&RpWorldForAllMaterials)                             = GameAddress + 0x22D419;
    *reinterpret_cast<void**>(&RpWorldForAllLights)                                = GameAddress + 0x22D449;
    *reinterpret_cast<void**>(&RpWorldForAllWorldSectors)                          = GameAddress + 0x22CC3D;
    *reinterpret_cast<void**>(&RpWorldRender)                                      = GameAddress + 0x22CC8D;
    *reinterpret_cast<void**>(&RpWorldDestroy)                                     = GameAddress + 0x22CDB5;
    *reinterpret_cast<void**>(&RpWorldCreate)                                      = GameAddress + 0x22D145;
    *reinterpret_cast<void**>(&RpWorldSetSectorRenderCallBack)                     = GameAddress + 0x22D12D;
    *reinterpret_cast<void**>(&RpWorldGetSectorRenderCallBack)                     = GameAddress + 0x22D141;
    *reinterpret_cast<void**>(&RpWorldSectorGetWorld)                              = GameAddress + 0x22CBB1;
    *reinterpret_cast<void**>(&RpWorldRegisterPlugin)                              = GameAddress + 0x22D499;
    *reinterpret_cast<void**>(&RpWorldRegisterPluginStream)                        = GameAddress + 0x22D4C5;
    *reinterpret_cast<void**>(&RpWorldSetStreamAlwaysCallBack)                     = GameAddress + 0x22D4E9;
    *reinterpret_cast<void**>(&RpWorldSetStreamRightsCallBack)                     = GameAddress + 0x22D4FD;
    *reinterpret_cast<void**>(&RpWorldGetPluginOffset)                             = GameAddress + 0x22D511;
    *reinterpret_cast<void**>(&RpWorldValidatePlugins)                             = GameAddress + 0x22D521;
    *reinterpret_cast<void**>(&RpWorldSetDefaultSectorPipeline)                    = GameAddress + 0x22F685;
    *reinterpret_cast<void**>(&RpAtomicSetDefaultPipeline)                         = GameAddress + 0x22F6AD;
    *reinterpret_cast<void**>(&RpMaterialSetDefaultPipeline)                       = GameAddress + 0x22F6D5;
    *reinterpret_cast<void**>(&RpGeometryIsCorrectlySorted)                        = GameAddress + 0x22EF39;
    *reinterpret_cast<void**>(&RpGeometrySortByMaterial)                           = GameAddress + 0x22F0A1;
    *reinterpret_cast<void**>(&RpTieSetFreeListCreateParams)                       = GameAddress + 0x22D749;
    *reinterpret_cast<void**>(&RpLightTieSetFreeListCreateParams)                  = GameAddress + 0x22D761;
    *reinterpret_cast<void**>(&RpWorldRemoveCamera)                                = GameAddress + 0x22DFA9;
    *reinterpret_cast<void**>(&RpWorldAddCamera)                                   = GameAddress + 0x22DF85;
    *reinterpret_cast<void**>(&RwCameraGetWorld)                                   = GameAddress + 0x22DFE9;
    *reinterpret_cast<void**>(&RpWorldRemoveAtomic)                                = GameAddress + 0x22E025;
    *reinterpret_cast<void**>(&RpWorldAddAtomic)                                   = GameAddress + 0x22DFF9;
    *reinterpret_cast<void**>(&RpAtomicGetWorld)                                   = GameAddress + 0x22E0BD;
    *reinterpret_cast<void**>(&RpWorldAddClump)                                    = GameAddress + 0x22E295;
    *reinterpret_cast<void**>(&RpWorldRemoveClump)                                 = GameAddress + 0x22E3D1;
    *reinterpret_cast<void**>(&RpClumpGetWorld)                                    = GameAddress + 0x22E601;
    *reinterpret_cast<void**>(&RpWorldAddLight)                                    = GameAddress + 0x22E7B1;
    *reinterpret_cast<void**>(&RpWorldRemoveLight)                                 = GameAddress + 0x22E7F5;
    *reinterpret_cast<void**>(&RpLightGetWorld)                                    = GameAddress + 0x22E875;
    *reinterpret_cast<void**>(&RwCameraForAllClumpsInFrustum)                      = GameAddress + 0x22E611;
    *reinterpret_cast<void**>(&RwCameraForAllSectorsInFrustum)                     = GameAddress + 0x22E5C9;
    *reinterpret_cast<void**>(&RpLightForAllWorldSectors)                          = GameAddress + 0x22E885;
    *reinterpret_cast<void**>(&RpAtomicForAllWorldSectors)                         = GameAddress + 0x22E0CD;
    *reinterpret_cast<void**>(&RpWorldSectorForAllAtomics)                         = GameAddress + 0x22E0FB;
    *reinterpret_cast<void**>(&RpWorldSectorForAllCollisionAtomics)                = GameAddress + 0x22E199;
    *reinterpret_cast<void**>(&RpWorldSectorForAllLights)                          = GameAddress + 0x22E1F9;
    *reinterpret_cast<void**>(&RpWorldStreamGetSize)                               = GameAddress + 0x222681;
    *reinterpret_cast<void**>(&RpWorldStreamRead)                                  = GameAddress + 0x222C51;
    *reinterpret_cast<void**>(&RpWorldStreamWrite)                                 = GameAddress + 0x2227FD;
    *reinterpret_cast<void**>(&_rpWorldSectorChunkInfoRead)                        = GameAddress + 0x22363D;
    *reinterpret_cast<void**>(&_rpPlaneSectorChunkInfoRead)                        = GameAddress + 0x2236BF;
    *reinterpret_cast<void**>(&_rpWorldChunkInfoRead)                              = GameAddress + 0x22373D;
    *reinterpret_cast<void**>(&RtQuatConvertFromMatrix)                            = GameAddress + 0x220ED1;
    *reinterpret_cast<void**>(&RtQuatRotate)                                       = GameAddress + 0x221135;
    *reinterpret_cast<void**>(&RtQuatQueryRotate)                                  = GameAddress + 0x2213C1;
    *reinterpret_cast<void**>(&RtQuatTransformVectors)                             = GameAddress + 0x2214D1;
    *reinterpret_cast<void**>(&RtQuatModulus)                                      = GameAddress + 0x2215DB;
    *reinterpret_cast<void**>(&RtAnimAnimationFreeListCreateParams)                = GameAddress + 0x1FADA5;
    *reinterpret_cast<void**>(&RtAnimInitialize)                                   = GameAddress + 0x1FADBD;
    *reinterpret_cast<void**>(&RtAnimRegisterInterpolationScheme)                  = GameAddress + 0x1FAE69;
    *reinterpret_cast<void**>(&RtAnimGetInterpolatorInfo)                          = GameAddress + 0x1FAEF5;
    *reinterpret_cast<void**>(&RtAnimAnimationCreate)                              = GameAddress + 0x1FAF2D;
    *reinterpret_cast<void**>(&RtAnimAnimationDestroy)                             = GameAddress + 0x1FAFBD;
    *reinterpret_cast<void**>(&RtAnimAnimationRead)                                = GameAddress + 0x1FAFD9;
    *reinterpret_cast<void**>(&RtAnimAnimationWrite)                               = GameAddress + 0x1FB131;
    *reinterpret_cast<void**>(&RtAnimAnimationStreamRead)                          = GameAddress + 0x1FB011;
    *reinterpret_cast<void**>(&RtAnimAnimationStreamWrite)                         = GameAddress + 0x1FB15D;
    *reinterpret_cast<void**>(&RtAnimAnimationStreamGetSize)                       = GameAddress + 0x1FB1E5;
    *reinterpret_cast<void**>(&RtAnimAnimationGetNumNodes)                         = GameAddress + 0x1FB1F3;
    *reinterpret_cast<void**>(&RtAnimInterpolatorCreate)                           = GameAddress + 0x1FB219;
    *reinterpret_cast<void**>(&RtAnimInterpolatorDestroy)                          = GameAddress + 0x1FB271;
    *reinterpret_cast<void**>(&RtAnimInterpolatorSetCurrentAnim)                   = GameAddress + 0x1FB285;
    *reinterpret_cast<void**>(&RtAnimInterpolatorSetKeyFrameCallBacks)             = GameAddress + 0x1FB371;
    *reinterpret_cast<void**>(&RtAnimInterpolatorSetAnimLoopCallBack)              = GameAddress + 0x1FB3D9;
    *reinterpret_cast<void**>(&RtAnimInterpolatorSetAnimCallBack)                  = GameAddress + 0x1FB3DF;
    *reinterpret_cast<void**>(&RtAnimInterpolatorCopy)                             = GameAddress + 0x1FB3E7;
    *reinterpret_cast<void**>(&RtAnimInterpolatorSubAnimTime)                      = GameAddress + 0x1FB3FD;
    *reinterpret_cast<void**>(&RtAnimInterpolatorAddAnimTime)                      = GameAddress + 0x1FB531;
    *reinterpret_cast<void**>(&RtAnimInterpolatorSetCurrentTime)                   = GameAddress + 0x1FB6DD;
    *reinterpret_cast<void**>(&RtAnimAnimationMakeDelta)                           = GameAddress + 0x1FB711;
    *reinterpret_cast<void**>(&RtAnimInterpolatorBlend)                            = GameAddress + 0x1FB855;
    *reinterpret_cast<void**>(&RtAnimInterpolatorAddTogether)                      = GameAddress + 0x1FB8B1;
    *reinterpret_cast<void**>(&RtAnimInterpolatorCreateSubInterpolator)            = GameAddress + 0x1FB901;
    *reinterpret_cast<void**>(&RtAnimInterpolatorBlendSubInterpolator)             = GameAddress + 0x1FB96D;
    *reinterpret_cast<void**>(&RtAnimInterpolatorAddSubInterpolator)               = GameAddress + 0x1FBB0F;
    *reinterpret_cast<void**>(&RpHAnimHierarchySetFreeListCreateParams)            = GameAddress + 0x1D201D;
    *reinterpret_cast<void**>(&RpHAnimHierarchyCreate)                             = GameAddress + 0x1D2675;
    *reinterpret_cast<void**>(&RpHAnimHierarchyCreateFromHierarchy)                = GameAddress + 0x1D28DD;
    *reinterpret_cast<void**>(&RpHAnimHierarchyDestroy)                            = GameAddress + 0x1D274D;
    *reinterpret_cast<void**>(&RpHAnimHierarchyCreateSubHierarchy)                 = GameAddress + 0x1D27D5;
    *reinterpret_cast<void**>(&RpHAnimHierarchyAttach)                             = GameAddress + 0x1D29D1;
    *reinterpret_cast<void**>(&RpHAnimHierarchyDetach)                             = GameAddress + 0x1D2A99;
    *reinterpret_cast<void**>(&RpHAnimHierarchyAttachFrameIndex)                   = GameAddress + 0x1D2ABD;
    *reinterpret_cast<void**>(&RpHAnimHierarchyDetachFrameIndex)                   = GameAddress + 0x1D2B9D;
    *reinterpret_cast<void**>(&RpHAnimFrameSetHierarchy)                           = GameAddress + 0x1D2BAD;
    *reinterpret_cast<void**>(&RpHAnimFrameGetHierarchy)                           = GameAddress + 0x1D2BD9;
    *reinterpret_cast<void**>(&RpHAnimHierarchyGetMatrixArray)                     = GameAddress + 0x1D2BA9;
    *reinterpret_cast<void**>(&RpHAnimHierarchyUpdateMatrices)                     = GameAddress + 0x1D2C35;
    *reinterpret_cast<void**>(&RpHAnimIDGetIndex)                                  = GameAddress + 0x1D2C11;
    *reinterpret_cast<void**>(&RpHAnimPluginAttach)                                = GameAddress + 0x1D2035;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameApply)                               = GameAddress + 0x1D34F9;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameBlend)                               = GameAddress + 0x1D3A79;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameInterpolate)                         = GameAddress + 0x1D35C9;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameAdd)                                 = GameAddress + 0x1D4113;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameMulRecip)                            = GameAddress + 0x1D3FF7;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameStreamRead)                          = GameAddress + 0x1D3F19;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameStreamWrite)                         = GameAddress + 0x1D3F8B;
    *reinterpret_cast<void**>(&RpHAnimKeyFrameStreamGetSize)                       = GameAddress + 0x1D3FED;
    *reinterpret_cast<void**>(&RpHAnimFrameSetID)                                  = GameAddress + 0x1D2BED;
    *reinterpret_cast<void**>(&RpHAnimFrameGetID)                                  = GameAddress + 0x1D2C01;
    *reinterpret_cast<void**>(&_rpUVAnimCustomDataStreamRead)                      = GameAddress + 0x1DA881;
    *reinterpret_cast<void**>(&_rpUVAnimCustomDataStreamWrite)                     = GameAddress + 0x1DA8D1;
    *reinterpret_cast<void**>(&_rpUVAnimCustomDataStreamGetSize)                   = GameAddress + 0x1DA8FD;
    *reinterpret_cast<void**>(&RpUVAnimPluginAttach)                               = GameAddress + 0x1DA299;
    *reinterpret_cast<void**>(&RpUVAnimLinearKeyFrameApply)                        = GameAddress + 0x1D9C5D;
    *reinterpret_cast<void**>(&RpUVAnimLinearKeyFrameBlend)                        = GameAddress + 0x1D9D31;
    *reinterpret_cast<void**>(&RpUVAnimLinearKeyFrameInterpolate)                  = GameAddress + 0x1D9C87;
    *reinterpret_cast<void**>(&RpUVAnimLinearKeyFrameAdd)                          = GameAddress + 0x1D9E73;
    *reinterpret_cast<void**>(&RpUVAnimLinearKeyFrameMulRecip)                     = GameAddress + 0x1D9DC7;
    *reinterpret_cast<void**>(&RpUVAnimParamKeyFrameApply)                         = GameAddress + 0x1D9F31;
    *reinterpret_cast<void**>(&RpUVAnimParamKeyFrameBlend)                         = GameAddress + 0x1DA0B1;
    *reinterpret_cast<void**>(&RpUVAnimParamKeyFrameInterpolate)                   = GameAddress + 0x1D9FCD;
    *reinterpret_cast<void**>(&RpUVAnimParamKeyFrameAdd)                           = GameAddress + 0x1DA183;
    *reinterpret_cast<void**>(&RpUVAnimParamKeyFrameMulRecip)                      = GameAddress + 0x1DA181;
    *reinterpret_cast<void**>(&RpUVAnimKeyFrameStreamRead)                         = GameAddress + 0x1DAFB9;
    *reinterpret_cast<void**>(&RpUVAnimKeyFrameStreamWrite)                        = GameAddress + 0x1DB02F;
    *reinterpret_cast<void**>(&RpUVAnimKeyFrameStreamGetSize)                      = GameAddress + 0x1DB0AF;
    *reinterpret_cast<void**>(&RpUVAnimCreate)                                     = GameAddress + 0x1DA901;
    *reinterpret_cast<void**>(&RpUVAnimDestroy)                                    = GameAddress + 0x1DA259;
    *reinterpret_cast<void**>(&RpUVAnimAddRef)                                     = GameAddress + 0x1DA24D;
    *reinterpret_cast<void**>(&RpUVAnimGetName)                                    = GameAddress + 0x1DA295;
    *reinterpret_cast<void**>(&RpMaterialSetUVAnim)                                = GameAddress + 0x1DAB8D;
    *reinterpret_cast<void**>(&RpMaterialUVAnimGetInterpolator)                    = GameAddress + 0x1DACA9;
    *reinterpret_cast<void**>(&RpMaterialUVAnimSetInterpolator)                    = GameAddress + 0x1DACC1;
    *reinterpret_cast<void**>(&RpMaterialUVAnimSetCurrentTime)                     = GameAddress + 0x1DACD9;
    *reinterpret_cast<void**>(&RpMaterialUVAnimAddAnimTime)                        = GameAddress + 0x1DAD5D;
    *reinterpret_cast<void**>(&RpMaterialUVAnimSubAnimTime)                        = GameAddress + 0x1DADE1;
    *reinterpret_cast<void**>(&RpMaterialUVAnimExists)                             = GameAddress + 0x1DAE65;
    *reinterpret_cast<void**>(&RpSkinSetFreeListCreateParams)                      = GameAddress + 0x1D909D;
    *reinterpret_cast<void**>(&RpSkinPluginAttach)                                 = GameAddress + 0x1D90C5;
    *reinterpret_cast<void**>(&RpSkinAtomicSetHAnimHierarchy)                      = GameAddress + 0x1D98DD;
    *reinterpret_cast<void**>(&RpSkinAtomicGetHAnimHierarchy)                      = GameAddress + 0x1D98ED;
    *reinterpret_cast<void**>(&RpSkinGeometrySetSkin)                              = GameAddress + 0x1D990D;
    *reinterpret_cast<void**>(&RpSkinGeometryGetSkin)                              = GameAddress + 0x1D98FD;
    *reinterpret_cast<void**>(&RpSkinCreate)                                       = GameAddress + 0x1D9951;
    *reinterpret_cast<void**>(&RpSkinDestroy)                                      = GameAddress + 0x1D9BB1;
    *reinterpret_cast<void**>(&RpSkinGetNumBones)                                  = GameAddress + 0x1D9BF1;
    *reinterpret_cast<void**>(&RpSkinGetVertexBoneWeights)                         = GameAddress + 0x1D9BF5;
    *reinterpret_cast<void**>(&RpSkinGetVertexBoneIndices)                         = GameAddress + 0x1D9BF9;
    *reinterpret_cast<void**>(&RpSkinGetSkinToBoneMatrices)                        = GameAddress + 0x1D9BFD;
    *reinterpret_cast<void**>(&RpSkinIsSplit)                                      = GameAddress + 0x1D9C01;
    *reinterpret_cast<void**>(&RpSkinAtomicSetType)                                = GameAddress + 0x1D9C0B;
    *reinterpret_cast<void**>(&RpSkinAtomicGetType)                                = GameAddress + 0x1D9C4B;
    *reinterpret_cast<void**>(&_rpSkinInitialize)                                  = GameAddress + 0x1D7B05;
    *reinterpret_cast<void**>(&_rpSkinDeinitialize)                                = GameAddress + 0x1D7BD9;
    *reinterpret_cast<void**>(&_rpSkinGetMeshBoneRemapIndices)                     = GameAddress + 0x1D781D;
    *reinterpret_cast<void**>(&_rpSkinGetMeshBoneRLECount)                         = GameAddress + 0x1D7821;
    *reinterpret_cast<void**>(&_rpSkinGetMeshBoneRLE)                              = GameAddress + 0x1D7825;
    *reinterpret_cast<void**>(&_rpSkinSplitDataCreate)                             = GameAddress + 0x1D7829;
    *reinterpret_cast<void**>(&_rpSkinSplitDataDestroy)                            = GameAddress + 0x1D78B1;
    *reinterpret_cast<void**>(&RtDictSchemaInit)                                   = GameAddress + 0x1FD341;
    *reinterpret_cast<void**>(&RtDictSchemaDestruct)                               = GameAddress + 0x1FD363;
    *reinterpret_cast<void**>(&RtDictSchemaStreamReadDict)                         = GameAddress + 0x1FD6E7;
    *reinterpret_cast<void**>(&RtDictSchemaCreateDict)                             = GameAddress + 0x1FD371;
    *reinterpret_cast<void**>(&RtDictSchemaAddDict)                                = GameAddress + 0x1FD433;
    *reinterpret_cast<void**>(&RtDictSchemaRemoveDict)                             = GameAddress + 0x1FD453;
    *reinterpret_cast<void**>(&RtDictSchemaForAllDictionaries)                     = GameAddress + 0x1FD88D;
    *reinterpret_cast<void**>(&RtDictSchemaGetCurrentDict)                         = GameAddress + 0x1FD4A5;
    *reinterpret_cast<void**>(&RtDictSchemaSetCurrentDict)                         = GameAddress + 0x1FD4A9;
    *reinterpret_cast<void**>(&RtDictDestroy)                                      = GameAddress + 0x1FD609;
    *reinterpret_cast<void**>(&RtDictAddEntry)                                     = GameAddress + 0x1FD4E7;
    *reinterpret_cast<void**>(&RtDictFindNamedEntry)                               = GameAddress + 0x1FD50D;
    *reinterpret_cast<void**>(&RtDictForAllEntries)                                = GameAddress + 0x1FD569;
    *reinterpret_cast<void**>(&RtDictRemoveEntry)                                  = GameAddress + 0x1FD5A3;
    *reinterpret_cast<void**>(&RtDictStreamWrite)                                  = GameAddress + 0x1FD79F;
    *reinterpret_cast<void**>(&RtDictStreamGetSize)                                = GameAddress + 0x1FD6A5;
    *reinterpret_cast<void**>(&_rtDictSchemaInitDict)                              = GameAddress + 0x1FD3F5;
    *reinterpret_cast<void**>(&_rtDictDestruct)                                    = GameAddress + 0x1FD4AD;
    *reinterpret_cast<void**>(&RpMatFXMaterialDataSetFreeListCreateParams)         = GameAddress + 0x1D5F61;
    *reinterpret_cast<void**>(&RpMatFXPluginAttach)                                = GameAddress + 0x1D6251;
    *reinterpret_cast<void**>(&RpMatFXAtomicEnableEffects)                         = GameAddress + 0x1D6EC5;
    *reinterpret_cast<void**>(&RpMatFXAtomicQueryEffects)                          = GameAddress + 0x1D6EF5;
    *reinterpret_cast<void**>(&RpMatFXWorldSectorEnableEffects)                    = GameAddress + 0x1D6F05;
    *reinterpret_cast<void**>(&RpMatFXWorldSectorQueryEffects)                     = GameAddress + 0x1D6F35;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetEffects)                          = GameAddress + 0x1D6F45;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetupBumpMap)                        = GameAddress + 0x1D7115;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetupEnvMap)                         = GameAddress + 0x1D7361;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetupDualTexture)                    = GameAddress + 0x1D74F1;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetEffects)                          = GameAddress + 0x1D75FD;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetBumpMapTexture)                   = GameAddress + 0x1D7189;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetBumpMapFrame)                     = GameAddress + 0x1D730D;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetBumpMapCoefficient)               = GameAddress + 0x1D7335;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetBumpMapTexture)                   = GameAddress + 0x1D7639;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetBumpMapBumpedTexture)             = GameAddress + 0x1D7615;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetBumpMapFrame)                     = GameAddress + 0x1D765D;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetBumpMapCoefficient)               = GameAddress + 0x1D7681;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetEnvMapTexture)                    = GameAddress + 0x1D7425;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetEnvMapFrame)                      = GameAddress + 0x1D7479;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetEnvMapFrameBufferAlpha)           = GameAddress + 0x1D74A1;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetEnvMapCoefficient)                = GameAddress + 0x1D74C9;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetEnvMapTexture)                    = GameAddress + 0x1D76A9;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetEnvMapFrame)                      = GameAddress + 0x1D76CD;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetEnvMapFrameBufferAlpha)           = GameAddress + 0x1D76F1;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetEnvMapCoefficient)                = GameAddress + 0x1D7715;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetDualTexture)                      = GameAddress + 0x1D7599;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetDualBlendModes)                   = GameAddress + 0x1D70C9;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetDualTexture)                      = GameAddress + 0x1D7739;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetDualBlendModes)                   = GameAddress + 0x1D775D;
    *reinterpret_cast<void**>(&RpMatFXMaterialSetUVTransformMatrices)              = GameAddress + 0x1D7795;
    *reinterpret_cast<void**>(&RpMatFXMaterialGetUVTransformMatrices)              = GameAddress + 0x1D77C9;
    *reinterpret_cast<void**>(&RsEventHandler)                                     = GameAddress + 0x4E4381;
    *reinterpret_cast<void**>(&RtBMPImageWrite)                                    = GameAddress + 0x1FC645;
    *reinterpret_cast<void**>(&RtBMPImageRead)                                     = GameAddress + 0x1FBB8D;
    *reinterpret_cast<void**>(&RtPNGImageWrite)                                    = GameAddress + 0x21A145;
    *reinterpret_cast<void**>(&RtPNGImageRead)                                     = GameAddress + 0x21A3F5;
    *reinterpret_cast<void**>(&_rpMaterialSetDefaultSurfaceProperties)             = GameAddress + 0x227065;
    *reinterpret_cast<void**>(&_rwObjectHasFrameSetFrame)                          = GameAddress + 0x1ECF65;
    *reinterpret_cast<void**>(&_rwObjectHasFrameReleaseFrame)                      = GameAddress + 0x1ECF97;
    *reinterpret_cast<void**>(&_rwStreamReadChunkHeader)                           = GameAddress + 0x1F1EF5;
};

RwGlobals **RwEngineInstance;
RsGlobalType *RsGlobal;

RwMemoryFunctions* (*RwOsGetMemoryInterface)();
// RwFreeList* (*_rwFreeListCreate)(RwInt32, RwInt32, RwInt32, RwUInt32, const RwChar*, RwUInt32);
RwFreeList* (*RwFreeListCreateAndPreallocateSpace)(RwInt32, RwInt32, RwInt32, RwInt32, RwFreeList*, RwUInt32);
RwBool (*RwFreeListDestroy)(RwFreeList*);
void (*RwFreeListSetFlags)(RwFreeList*, RwUInt32);
RwUInt32 (*RwFreeListGetFlags)(RwFreeList*);
RwInt32 (*RwFreeListPurge)(RwFreeList*);
RwFreeList* (*RwFreeListForAllUsed)(RwFreeList*, RwFreeListCallBack, void*);
RwInt32 (*RwFreeListPurgeAllFreeLists)();
void (*RwStreamSetFreeListCreateParams)(RwInt32, RwInt32);
RwStream* (*_rwStreamInitialize)(RwStream*, RwBool, RwStreamType, RwStreamAccessType, const void*);
RwStream* (*RwStreamOpen)(RwStreamType, RwStreamAccessType, const void*);
RwBool (*RwStreamClose)(RwStream*, void*);
RwUInt32 (*RwStreamRead)(RwStream*, void*, RwUInt32);
RwStream* (*RwStreamWrite)(RwStream*, const void*, RwUInt32);
RwStream* (*RwStreamSkip)(RwStream*, RwUInt32);
RwBool (*_rwStringOpen)();
void (*_rwStringClose)();
RwBool (*_rwStringDestroy)(RwChar*);
RwUInt32 (*_rwStringStreamGetSize)(const RwChar*);
const RwChar* (*_rwStringStreamWrite)(const RwChar*, RwStream*);
RwChar* (*_rwStringStreamFindAndRead)(RwChar*, RwStream*);
void (*RwPluginRegistrySetFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*_rwPluginRegistrySetStaticPluginsSize)(RwPluginRegistry*, RwInt32);
RwInt32 (*_rwPluginRegistryAddPlugin)(RwPluginRegistry*, RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*_rwPluginRegistryGetPluginOffset)(const RwPluginRegistry*, RwUInt32);
const RwPluginRegistry* (*_rwPluginRegistryInitObject)(const RwPluginRegistry*, void*);
const RwPluginRegistry* (*_rwPluginRegistryDeInitObject)(const RwPluginRegistry*, void*);
const RwPluginRegistry* (*_rwPluginRegistryCopyObject)(const RwPluginRegistry*, void*, const void*);
RwInt32 (*_rwPluginRegistryAddPluginStream)(RwPluginRegistry*, RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*_rwPluginRegistryAddPlgnStrmlwysCB)(RwPluginRegistry*, RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*_rwPluginRegistryAddPlgnStrmRightsCB)(RwPluginRegistry*, RwUInt32, RwPluginDataChunkRightsCallBack);
const RwPluginRegistry* (*_rwPluginRegistryReadDataChunks)(const RwPluginRegistry*, RwStream*, void*);
const RwPluginRegistry* (*_rwPluginRegistryWriteDataChunks)(const RwPluginRegistry*, RwStream*, const void*);
const RwPluginRegistry* (*_rwPluginRegistrySkipDataChunks)(const RwPluginRegistry*, RwStream*);
RwInt32 (*_rwPluginRegistryGetSize)(const RwPluginRegistry*, const void*);
const RwPluginRegistry* (*_rwPluginRegistryInvokeRights)(const RwPluginRegistry*, RwUInt32, void*, RwUInt32);
RwBool (*RwEngineGetMatrixTolerances)(RwMatrixTolerance * const);
RwBool (*RwEngineSetMatrixTolerances)(const RwMatrixTolerance * const);
void (*RwMatrixSetFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*RwMatrixDestroy)(RwMatrix*);
RwMatrix* (*RwMatrixCreate)();
RwMatrix* (*RwMatrixMultiply)(RwMatrix*, const RwMatrix*, const RwMatrix*);
RwMatrix* (*RwMatrixTransform)(RwMatrix*, const RwMatrix*, RwOpCombineType);
RwMatrix* (*RwMatrixOrthoNormalize)(RwMatrix*, const RwMatrix*);
RwMatrix* (*RwMatrixInvert)(RwMatrix*, const RwMatrix*);
RwMatrix* (*RwMatrixScale)(RwMatrix*, const RwV3d*, RwOpCombineType);
RwMatrix* (*RwMatrixTranslate)(RwMatrix*, const RwV3d*, RwOpCombineType);
RwMatrix* (*RwMatrixRotate)(RwMatrix*, const RwV3d*, RwReal, RwOpCombineType);
RwMatrix* (*RwMatrixRotateOneMinusCosineSine)(RwMatrix*, const RwV3d*, RwReal, RwReal, RwOpCombineType);
const RwMatrix* (*RwMatrixQueryRotate)(const RwMatrix*, RwV3d*, RwReal*, RwV3d*);
RwMatrix* (*RwMatrixUpdate)(RwMatrix*);
RwMatrix* (*RwMatrixOptimize)(RwMatrix*, const RwMatrixTolerance*);
RwReal (*_rwMatrixDeterminant)(const RwMatrix*);
RwReal (*_rwMatrixNormalError)(const RwMatrix*);
RwReal (*_rwMatrixOrthogonalError)(const RwMatrix*);
RwReal (*_rwMatrixIdentityError)(const RwMatrix*);
RwReal (*RwV3dNormalize)(RwV3d*, const RwV3d*);
RwReal (*RwV3dLength)(const RwV3d*);
RwReal (*RwV2dLength)(const RwV2d*);
RwReal (*RwV2dNormalize)(RwV2d*, const RwV2d*);
RwV3d* (*RwV3dTransformPoint)(RwV3d*, const RwV3d*, const RwMatrix*);
RwV3d* (*RwV3dTransformPoints)(RwV3d*, const RwV3d*, RwInt32, const RwMatrix*);
RwV3d* (*RwV3dTransformVector)(RwV3d*, const RwV3d*, const RwMatrix*);
RwV3d* (*RwV3dTransformVectors)(RwV3d*, const RwV3d*, RwInt32, const RwMatrix*);
RwReal (*_rwSqrt)(const RwReal);
RwReal (*_rwInvSqrt)(const RwReal);
RwReal (*_rwV3dNormalize)(RwV3d*, const RwV3d*);
RwSList* (*_rwSListCreate)(RwInt32, RwUInt32);
RwBool (*_rwSListDestroy)(RwSList*);
void (*_rwSListDestroyEndEntries)(RwSList*, RwInt32);
void* (*_rwSListGetEntry)(RwSList*, RwInt32);
void* (*_rwSListGetNewEntry)(RwSList*, RwUInt32);
RwInt32 (*_rwSListGetNumEntries)(const RwSList*);
void* (*_rwSListGetBegin)(RwSList*);
void* (*_rwSListGetEnd)(RwSList*);
RwBool (*RwIm2DRenderPrimitive)(RwPrimitiveType, RwIm2DVertex*, RwInt32);
RwBool (*RwIm2DRenderIndexedPrimitive)(RwPrimitiveType, RwIm2DVertex*, RwInt32, RwImVertexIndex*, RwInt32);
RwBool (*RwIm2DRenderTriangle)(RwIm2DVertex*, RwInt32, RwInt32, RwInt32, RwInt32);
RwBool (*RwIm2DRenderLine)(RwIm2DVertex*, RwInt32, RwInt32, RwInt32);
RwUInt32 (*RwEngineGetVersion)();
RwBool (*RwEngineInit)(const RwMemoryFunctions*, RwUInt32, RwUInt32);
RwInt32 (*RwEngineRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor);
RwInt32 (*RwEngineGetPluginOffset)(RwUInt32);
RwBool (*RwEngineOpen)(RwEngineOpenParams*);
RwBool (*RwEngineStart)();
RwBool (*RwEngineStop)();
RwBool (*RwEngineClose)();
RwBool (*RwEngineTerm)();
RwInt32 (*RwEngineGetNumSubSystems)();
RwSubSystemInfo* (*RwEngineGetSubSystemInfo)(RwSubSystemInfo*, RwInt32);
RwInt32 (*RwEngineGetCurrentSubSystem)();
RwBool (*RwEngineSetSubSystem)(RwInt32);
RwInt32 (*RwEngineGetNumVideoModes)();
RwVideoMode* (*RwEngineGetVideoModeInfo)(RwVideoMode*, RwInt32);
RwInt32 (*RwEngineGetCurrentVideoMode)();
RwBool (*RwEngineSetVideoMode)(RwInt32);
RwInt32 (*RwEngineGetTextureMemorySize)();
RwInt32 (*RwEngineGetMaxTextureSize)();
RwBool (*RwEngineSetFocus)(RwBool);
RwMetrics* (*RwEngineGetMetrics)();
RwFileFunctions* (*RwOsGetFileInterface)();
RwError* (*RwErrorGet)(RwError*);
RwError* (*RwErrorSet)(RwError*);
RwInt32 (*_rwerror)(RwInt32, ...);
RwBool (*RwResourcesSetArenaSize)(RwUInt32);
RwInt32 (*RwResourcesGetArenaSize)();
RwInt32 (*RwResourcesGetArenaUsage)();
RwBool (*RwResourcesEmptyArena)();
RwResEntry* (*RwResourcesAllocateResEntry)(void*, RwResEntry*, RwInt32, RwResEntryDestroyNotify);
RwBool (*RwResourcesFreeResEntry)(RwResEntry*);
void (*_rwResourcesPurge)();
RwBool (*RwStreamFindChunk)(RwStream*, RwUInt32, RwUInt32*, RwUInt32*);
RwStream* (*_rwStreamWriteVersionedChunkHeader)(RwStream*, RwInt32, RwInt32, RwUInt32, RwUInt32);
RwStream* (*RwStreamWriteReal)(RwStream*, const RwReal*, RwUInt32);
RwStream* (*RwStreamWriteInt32)(RwStream*, const RwInt32*, RwUInt32);
RwStream* (*RwStreamWriteInt16)(RwStream*, const RwInt16*, RwUInt32);
RwStream* (*RwStreamReadReal)(RwStream*, RwReal*, RwUInt32);
RwStream* (*RwStreamReadInt32)(RwStream*, RwInt32*, RwUInt32);
RwStream* (*RwStreamReadInt16)(RwStream*, RwInt16*, RwUInt32);
RwStream* (*RwStreamReadChunkHeaderInfo)(RwStream*, RwChunkHeaderInfo*);
RxHeap* (*RxHeapCreate)(RwUInt32);
void (*RxHeapDestroy)(RxHeap*);
RwBool (*_rxHeapReset)(RxHeap*);
void* (*RxHeapAlloc)(RxHeap*, RwUInt32);
void (*RxHeapFree)(RxHeap*, void*);
void* (*RxHeapRealloc)(RxHeap*, void*, RwUInt32, RwBool);
void (*RxPipelineSetFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*_rxPipelineOpen)();
RwBool (*_rxPipelineClose)();
RxPipeline* (*RxPipelineCreate)();
void (*_rxPipelineDestroy)(RxPipeline*);
RxHeap* (*RxHeapGetGlobalHeap)();
RxPipeline* (*RxPipelineExecute)(RxPipeline*, void*, RwBool);
RxPacket* (*RxPacketCreate)(RxPipelineNode*);
RxCluster* (*RxClusterSetStride)(RxCluster*, RwInt32);
RxCluster* (*RxClusterSetExternalData)(RxCluster*, void*, RwInt32, RwInt32);
RxCluster* (*RxClusterSetData)(RxCluster*, void*, RwInt32, RwInt32);
void (*_rxPacketDestroy)(RxPacket*);
RxCluster* (*RxClusterInitializeData)(RxCluster*, RwUInt32, RwUInt16);
RxCluster* (*RxClusterResizeData)(RxCluster*, RwUInt32);
RxCluster* (*RxClusterDestroyData)(RxCluster*);
RxCluster* (*RxClusterLockWrite)(RxPacket*, RwUInt32, RxPipelineNode*);
void (*RxClusterUnlock)(RxCluster*);
RwUInt32 (*RxPipelineNodeSendConfigMsg)(RxPipelineNode*, RwUInt32, RwUInt32, void*);
RxPipelineNode* (*RxPipelineNodeForAllConnectedOutputs)(RxPipelineNode*, RxPipeline*, RxPipelineNodeOutputCallBack, void*);
RxPipelineCluster* (*RxPipelineNodeGetPipelineCluster)(RxPipelineNode*, RwUInt32);
RwUInt32 (*RxPipelineClusterGetCreationAttributes)(RxPipelineCluster*);
RxPipelineCluster* (*RxPipelineClusterSetCreationAttributes)(RxPipelineCluster*, RwUInt32);
RwUInt32 (*RxClusterGetAttributes)(RxCluster*);
RxCluster* (*RxClusterSetAttributes)(RxCluster*, RwUInt32);
RxNodeOutput (*RxPipelineNodeFindOutputByName)(RxPipelineNode*, const RwChar*);
RxNodeOutput (*RxPipelineNodeFindOutputByIndex)(RxPipelineNode*, RwUInt32);
RxNodeInput (*RxPipelineNodeFindInput)(RxPipelineNode*);
RxNodeDefinition* (*RxPipelineNodeCloneDefinition)(RxPipelineNode*, RxClusterDefinition*);
RxPipeline* (*RxPipelineNodeRequestCluster)(RxPipeline*, RxPipelineNode*, RxClusterDefinition*);
RxPipeline* (*RxPipelineNodeReplaceCluster)(RxPipeline*, RxPipelineNode*, RxClusterDefinition*, RxClusterDefinition*);
void* (*RxPipelineNodeGetInitData)(RxPipelineNode*);
void* (*RxPipelineNodeCreateInitData)(RxPipelineNode*, RwUInt32);
RxPipeline* (*RxPipelineClone)(RxPipeline*);
RxPipelineNode* (*RxPipelineFindNodeByName)(RxPipeline*, const RwChar*, RxPipelineNode*, RwInt32*);
RxPipelineNode* (*RxPipelineFindNodeByIndex)(RxPipeline*, RwUInt32);
RxLockedPipe* (*RxPipelineLock)(RxPipeline*);
RxPipeline* (*RxLockedPipeUnlock)(RxLockedPipe*);
RxPipeline* (*RxLockedPipeReplaceNode)(RxLockedPipe*, RxPipelineNode*, RxNodeDefinition*);
RxPipeline* (*RxLockedPipeDeleteNode)(RxLockedPipe*, RxPipelineNode*);
RxPipeline* (*RxLockedPipeSetEntryPoint)(RxLockedPipe*, RxNodeInput);
RxPipelineNode* (*RxLockedPipeGetEntryPoint)(RxLockedPipe*);
RxPipeline* (*RxLockedPipeAddPath)(RxLockedPipe*, RxNodeOutput, RxNodeInput);
RxPipeline* (*RxLockedPipeDeletePath)(RxLockedPipe*, RxNodeOutput, RxNodeInput);
RxPipeline* (*RxPipelineInsertDebugNode)(RxPipeline*, RxPipelineNode*, RxPipelineNode*, RxNodeDefinition*);
void (*RwRasterSetFreeListCreateParams)(RwInt32, RwInt32);
RwRaster* (*RwRasterCreate)(RwInt32, RwInt32, RwInt32, RwInt32);
RwBool (*RwRasterDestroy)(RwRaster*);
RwRaster* (*RwRasterGetOffset)(RwRaster*, RwInt16*, RwInt16*);
RwInt32 (*RwRasterGetNumLevels)(RwRaster*);
RwRaster* (*RwRasterSubRaster)(RwRaster*, RwRaster*, RwRect*);
RwRaster* (*RwRasterRenderFast)(RwRaster*, RwInt32, RwInt32);
RwRaster* (*RwRasterRender)(RwRaster*, RwInt32, RwInt32);
RwRaster* (*RwRasterRenderScaled)(RwRaster*, RwRect*);
RwRaster* (*RwRasterPushContext)(RwRaster*);
RwRaster* (*RwRasterPopContext)();
RwRaster* (*RwRasterGetCurrentContext)();
RwBool (*RwRasterClear)(RwInt32);
RwBool (*RwRasterClearRect)(RwRect*, RwInt32);
RwRaster* (*RwRasterShowRaster)(RwRaster*, void*, RwUInt32);
RwUInt8* (*RwRasterLock)(RwRaster*, RwUInt8, RwInt32);
RwRaster* (*RwRasterUnlock)(RwRaster*);
RwUInt8* (*RwRasterLockPalette)(RwRaster*, RwInt32);
RwRaster* (*RwRasterUnlockPalette)(RwRaster*);
RwInt32 (*RwRasterRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RwRasterGetPluginOffset)(RwUInt32);
RxRenderStateVector* (*RxRenderStateVectorSetDefaultRenderStateVector)(RxRenderStateVector*);
RwImage* (*RwImageCreate)(RwInt32, RwInt32, RwInt32);
RwBool (*RwImageDestroy)(RwImage*);
RwImage* (*RwImageAllocatePixels)(RwImage*);
RwImage* (*RwImageFreePixels)(RwImage*);
RwImage* (*RwImageApplyMask)(RwImage*, const RwImage*);
RwImage* (*RwImageMakeMask)(RwImage*);
RwImage* (*RwImageReadMaskedImage)(const RwChar*, const RwChar*);
RwImage* (*RwImageRead)(const RwChar*);
const RwChar* (*RwImageSetPath)(const RwChar*);
RwBool (*RwImageSetGamma)(RwReal);
RwImage* (*RwImageGammaCorrect)(RwImage*);
// RwBool (*RwPalQuantInit)(RwPalQuant*);
// void (*RwPalQuantTerm)(RwPalQuant*);
// void (*RwPalQuantAddImage)(RwPalQuant*, RwImage*, RwReal);
// RwInt32 (*RwPalQuantResolvePalette)(RwRGBA*, RwInt32, RwPalQuant*);
// void (*RwPalQuantMatchImage)(RwUInt8*, RwInt32, RwInt32, RwBool, RwPalQuant*, RwImage*);
RwBool (*RwTextureSetMipmapping)(RwBool);
RwBool (*RwTextureGetMipmapping)();
RwBool (*RwTextureSetAutoMipmapping)(RwBool);
RwBool (*RwTextureGetAutoMipmapping)();
RwBool (*RwTextureSetMipmapGenerationCallBack)(RwTextureCallBackMipmapGeneration);
RwTextureCallBackMipmapGeneration (*RwTextureGetMipmapGenerationCallBack)();
RwBool (*RwTextureSetMipmapNameCallBack)(RwTextureCallBackMipmapName);
RwTextureCallBackMipmapName (*RwTextureGetMipmapNameCallBack)();
RwBool (*RwTextureGenerateMipmapName)(RwChar*, RwChar*, RwUInt8, RwInt32);
RwBool (*RwTextureRasterGenerateMipmaps)(RwRaster*, RwImage*);
RwBool (*_rwTextureSetAutoMipMapState)(RwBool);
RwBool (*_rwTextureGetAutoMipMapState)();
RwTextureCallBackRead (*RwTextureGetReadCallBack)();
RwBool (*RwTextureSetReadCallBack)(RwTextureCallBackRead);
RwTextureCallBackFind (*RwTextureGetFindCallBack)();
RwBool (*RwTextureSetFindCallBack)(RwTextureCallBackFind);
RwTexture* (*RwTextureSetName)(RwTexture*, const RwChar*);
RwTexture* (*RwTextureSetMaskName)(RwTexture*, const RwChar*);
void (*RwTexDictionarySetFreeListCreateParams)(RwInt32, RwInt32);
RwTexDictionary* (*RwTexDictionaryCreate)();
RwBool (*RwTexDictionaryDestroy)(RwTexDictionary*);
RwTexture* (*RwTextureCreate)(RwRaster*);
RwBool (*RwTextureDestroy)(RwTexture*);
RwTexture* (*RwTextureSetRaster)(RwTexture*, RwRaster*);
RwTexture* (*RwTexDictionaryAddTexture)(RwTexDictionary*, RwTexture*);
RwTexture* (*RwTexDictionaryRemoveTexture)(RwTexture*);
RwTexture* (*RwTexDictionaryFindNamedTexture)(RwTexDictionary*, const RwChar*);
RwTexDictionary* (*RwTexDictionaryGetCurrent)();
RwTexDictionary* (*RwTexDictionarySetCurrent)(RwTexDictionary*);
const RwTexDictionary* (*RwTexDictionaryForAllTextures)(const RwTexDictionary*, RwTextureCallBack, void*);
RwBool (*RwTexDictionaryForAllTexDictionaries)(RwTexDictionaryCallBack, void*);
RwInt32 (*RwTextureRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RwTexDictionaryRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RwTextureGetPluginOffset)(RwUInt32);
RwInt32 (*RwTexDictionaryGetPluginOffset)(RwUInt32);
RwBool (*RwTextureValidatePlugins)(const RwTexture*);
RwBool (*RwTexDictionaryValidatePlugins)(const RwTexDictionary*);
rwIm3DPool* (*_rwIm3DGetPool)();
void* (*RwIm3DTransform)(RwIm3DVertex*, RwUInt32, RwMatrix*, RwUInt32);
RwBool (*RwIm3DEnd)();
RwBool (*RwIm3DRenderLine)(RwInt32, RwInt32);
RwBool (*RwIm3DRenderTriangle)(RwInt32, RwInt32, RwInt32);
RwBool (*RwIm3DRenderIndexedPrimitive)(RwPrimitiveType, RwImVertexIndex*, RwInt32);
RwBool (*RwIm3DRenderPrimitive)(RwPrimitiveType);
RxPipeline* (*RwIm3DGetTransformPipeline)();
RxPipeline* (*RwIm3DGetRenderPipeline)(RwPrimitiveType);
RxPipeline* (*RwIm3DSetTransformPipeline)(RxPipeline*);
RxPipeline* (*RwIm3DSetRenderPipeline)(RxPipeline*, RwPrimitiveType);
RwBool (*_rwDeviceRegisterPlugin)();
RwImage* (*RwImageResample)(RwImage*, const RwImage*);
RwImage* (*RwImageCreateResample)(const RwImage*, RwInt32, RwInt32);
RwImage* (*RwImageSetFromRaster)(RwImage*, RwRaster*);
RwRaster* (*RwRasterSetFromImage)(RwRaster*, RwImage*);
RwRaster* (*RwRasterRead)(const RwChar*);
RwRaster* (*RwRasterReadMaskedRaster)(const RwChar*, const RwChar*);
RwImage* (*RwImageFindRasterFormat)(RwImage*, RwInt32, RwInt32*, RwInt32*, RwInt32*, RwInt32*);
RwFrame* (*RwFrameForAllObjects)(RwFrame*, RwObjectCallBack, void*);
RwFrame* (*RwFrameTranslate)(RwFrame*, const RwV3d*, RwOpCombineType);
RwFrame* (*RwFrameRotate)(RwFrame*, const RwV3d*, RwReal, RwOpCombineType);
RwFrame* (*RwFrameScale)(RwFrame*, const RwV3d*, RwOpCombineType);
RwFrame* (*RwFrameTransform)(RwFrame*, const RwMatrix*, RwOpCombineType);
RwFrame* (*RwFrameOrthoNormalize)(RwFrame*);
RwFrame* (*RwFrameSetIdentity)(RwFrame*);
RwFrame* (*RwFrameCloneHierarchy)(RwFrame*);
RwBool (*RwFrameDestroyHierarchy)(RwFrame*);
RwFrame* (*RwFrameForAllChildren)(RwFrame*, RwFrameCallBack, void*);
RwFrame* (*RwFrameRemoveChild)(RwFrame*);
RwFrame* (*RwFrameAddChild)(RwFrame*, RwFrame*);
// RwFrame* (*RwFrameAddChildNoUpdate)(RwFrame*, RwFrame*);
RwFrame* (*RwFrameGetRoot)(const RwFrame*);
RwMatrix* (*RwFrameGetLTM)(RwFrame*);
RwFrame* (*RwFrameUpdateObjects)(RwFrame*);
void (*RwFrameSetFreeListCreateParams)(RwInt32, RwInt32);
RwFrame* (*RwFrameCreate)();
RwBool (*RwFrameDestroy)(RwFrame*);
void (*_rwFrameInit)(RwFrame*);
void (*_rwFrameDeInit)(RwFrame*);
RwBool (*RwFrameDirty)(const RwFrame*);
RwInt32 (*RwFrameCount)(RwFrame*);
RwInt32 (*RwFrameRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RwFrameGetPluginOffset)(RwUInt32);
RwBool (*RwFrameValidatePlugins)(const RwFrame*);
RwFrame* (*_rwFrameCloneAndLinkClones)(RwFrame*);
RwFrame* (*_rwFramePurgeClone)(RwFrame*);
RwBool (*_rwFrameSyncDirty)();
void (*_rwFrameSyncHierarchyLTM)(RwFrame*);
RwInt32 (*RwTextureRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RwTextureSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwUInt32 (*RwTextureStreamGetSize)(const RwTexture*);
RwTexture* (*RwTextureStreamRead)(RwStream*);
const RwTexture* (*RwTextureStreamWrite)(const RwTexture*, RwStream*);
RwInt32 (*RwTexDictionaryRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RwTexDictionarySetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwUInt32 (*RwTexDictionaryStreamGetSize)(const RwTexDictionary*);
RwTexDictionary* (*RwTexDictionaryStreamRead)(RwStream*);
const RwTexDictionary* (*RwTexDictionaryStreamWrite)(const RwTexDictionary*, RwStream*);
RwTextureChunkInfo* (*_rwTextureChunkInfoRead)(RwStream*, RwTextureChunkInfo*, RwInt32*);
// void (*RwFrameListSetAutoUpdate)(RwBool);
RwInt32 (*RwFrameRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RwFrameSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
rwFrameList* (*_rwFrameListInitialize)(rwFrameList*, RwFrame*);
RwBool (*_rwFrameListFindFrame)(const rwFrameList*, const RwFrame*, RwInt32*);
rwFrameList* (*_rwFrameListDeinitialize)(rwFrameList*);
RwUInt32 (*_rwFrameListStreamGetSize)(const rwFrameList*);
rwFrameList* (*_rwFrameListStreamRead)(RwStream*, rwFrameList*);
const rwFrameList* (*_rwFrameListStreamWrite)(const rwFrameList*, RwStream*);
RwBBox* (*RwBBoxCalculate)(RwBBox*, const RwV3d*, RwInt32);
RwBBox* (*RwBBoxInitialize)(RwBBox*, const RwV3d*);
RwBBox* (*RwBBoxAddPoint)(RwBBox*, const RwV3d*);
RwBool (*RwBBoxContainsPoint)(const RwBBox*, const RwV3d*);
RwCamera* (*RwCameraBeginUpdate)(RwCamera*);
RwCamera* (*RwCameraEndUpdate)(RwCamera*);
RwCamera* (*RwCameraClear)(RwCamera*, RwRGBA*, RwInt32);
RwCamera* (*RwCameraShowRaster)(RwCamera*, void*, RwUInt32);
void (*RwCameraSetFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*RwCameraDestroy)(RwCamera*);
RwCamera* (*RwCameraCreate)();
RwCamera* (*RwCameraClone)(RwCamera*);
RwCamera* (*RwCameraSetViewOffset)(RwCamera*, const RwV2d*);
RwCamera* (*RwCameraSetViewWindow)(RwCamera*, const RwV2d*);
RwCamera* (*RwCameraSetProjection)(RwCamera*, RwCameraProjection);
RwCamera* (*RwCameraSetNearClipPlane)(RwCamera*, RwReal);
RwCamera* (*RwCameraSetFarClipPlane)(RwCamera*, RwReal);
RwInt32 (*RwCameraRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RwCameraGetPluginOffset)(RwUInt32);
RwBool (*RwCameraValidatePlugins)(const RwCamera*);
RwFrustumTestResult (*RwCameraFrustumTestSphere)(const RwCamera*, const RwSphere*);
RwInt32 (*RwCameraRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RwCameraSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwUInt32 (*RwCameraStreamGetSize)(const RwCamera*);
RwCamera* (*RwCameraStreamRead)(RwStream*);
const RwCamera* (*RwCameraStreamWrite)(const RwCamera*, RwStream*);
RwCameraChunkInfo* (*RwCameraChunkInfoRead)(RwStream*, RwCameraChunkInfo*, RwInt32*);
void (*RpMaterialSetFreeListCreateParams)(RwInt32, RwInt32);
RpMaterial* (*RpMaterialCreate)();
RwBool (*RpMaterialDestroy)(RpMaterial*);
RpMaterial* (*RpMaterialClone)(RpMaterial*);
RpMaterial* (*RpMaterialSetTexture)(RpMaterial*, RwTexture*);
RwInt32 (*RpMaterialRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpMaterialRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpMaterialSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpMaterialSetStreamRightsCallBack)(RwUInt32, RwPluginDataChunkRightsCallBack);
RwInt32 (*RpMaterialGetPluginOffset)(RwUInt32);
RwBool (*RpMaterialValidatePlugins)(const RpMaterial*);
RwUInt32 (*RpMaterialStreamGetSize)(const RpMaterial*);
RpMaterial* (*RpMaterialStreamRead)(RwStream*);
const RpMaterial* (*RpMaterialStreamWrite)(const RpMaterial*, RwStream*);
RpMaterialChunkInfo* (*_rpMaterialChunkInfoRead)(RwStream*, RpMaterialChunkInfo*, RwInt32*);
RpMaterialList* (*_rpMaterialListInitialize)(RpMaterialList*);
RpMaterialList* (*_rpMaterialListDeinitialize)(RpMaterialList*);
RpMaterial** (*_rpMaterialListAlloc)(RwUInt32);
RpMaterial* (*_rpMaterialListGetMaterial)(const RpMaterialList*, RwInt32);
RpMaterialList* (*_rpMaterialListSetSize)(RpMaterialList*, RwInt32);
RpMaterialList* (*_rpMaterialListCopy)(RpMaterialList*, const RpMaterialList*);
RwInt32 (*_rpMaterialListAppendMaterial)(RpMaterialList*, RpMaterial*);
RwInt32 (*_rpMaterialListFindMaterialIndex)(const RpMaterialList*, const RpMaterial*);
RwUInt32 (*_rpMaterialListStreamGetSize)(const RpMaterialList*);
RpMaterialList* (*_rpMaterialListStreamRead)(RwStream*, RpMaterialList*);
const RpMaterialList* (*_rpMaterialListStreamWrite)(const RpMaterialList*, RwStream*);
void* (*_rpMeshOpen)(void*, RwInt32, RwInt32);
void* (*_rpMeshClose)(void*, RwInt32, RwInt32);
RwInt16 (*_rpMeshGetNextSerialNumber)();
RpBuildMesh* (*_rpBuildMeshCreate)(RwUInt32);
RwBool (*_rpBuildMeshDestroy)(RpBuildMesh*);
RwBool (*_rpMeshDestroy)(RpMeshHeader*);
RpBuildMesh* (*_rpBuildMeshAddTriangle)(RpBuildMesh*, RpMaterial*, RwInt32, RwInt32, RwInt32, RwUInt16, RwUInt16, RwUInt16, RwUInt16);
RpMeshHeader* (*_rpMeshHeaderForAllMeshes)(RpMeshHeader*, RpMeshCallBack, void*);
RwStream* (*_rpMeshWrite)(const RpMeshHeader*, const void*, RwStream*, const RpMaterialList*);
RpMeshHeader* (*_rpMeshRead)(RwStream*, const void*, const RpMaterialList*);
RwInt32 (*_rpMeshSize)(const RpMeshHeader*, const void*);
void (*_rpMeshHeaderDestroy)(RpMeshHeader*);
RpMeshHeader* (*_rpMeshHeaderCreate)(RwUInt32);
RpTriStripPolygon* (*RpTriStripPolygonFollowStrip)(RpTriStripPolygon*, RpTriStripPolygon*);
RwUInt32 (*RpTriStripDefaultCost)(RpTriStripPolygon*, RwUInt32, void*);
RpTriStripMesh* (*RpTriStripMeshTunnel)(RpTriStripMesh*, void*);
RpTriStripMesh* (*RpTriStripMeshQuick)(RpTriStripMesh*, void*);
RpMeshHeader* (*RpBuildMeshGenerateTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGenerateTrivialTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGenerateDefaultTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGeneratePreprocessTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGenerateExhaustiveTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGenerateDefaultIgnoreWindingTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGeneratePreprocessIgnoreWindingTriStrip)(RpBuildMesh*, void*);
RpMeshHeader* (*RpBuildMeshGenerateExhaustiveIgnoreWindingTriStrip)(RpBuildMesh*, void*);
RwBool (*RpMeshSetTriStripMethod)(RpTriStripMeshCallBack, void*);
RwBool (*RpMeshGetTriStripMethod)(RpTriStripMeshCallBack*, void*);
RpMeshHeader* (*_rpTriListMeshGenerate)(RpBuildMesh*, void*);
RpMeshHeader* (*_rpMeshOptimise)(RpBuildMesh*, RwUInt32);
RpGeometry* (*RpGeometryTransform)(RpGeometry*, const RwMatrix*);
RpGeometry* (*RpGeometryCreateSpace)(RwReal);
const RpMorphTarget* (*RpMorphTargetCalcBoundingSphere)(const RpMorphTarget*, RwSphere*);
RwInt32 (*RpGeometryAddMorphTargets)(RpGeometry*, RwInt32);
RwInt32 (*RpGeometryAddMorphTarget)(RpGeometry*);
RpGeometry* (*RpGeometryRemoveMorphTarget)(RpGeometry*, RwInt32);
const RpGeometry* (*RpGeometryTriangleSetVertexIndices)(const RpGeometry*, RpTriangle*, RwUInt16, RwUInt16, RwUInt16);
RpGeometry* (*RpGeometryTriangleSetMaterial)(RpGeometry*, RpTriangle*, RpMaterial*);
const RpGeometry* (*RpGeometryTriangleGetVertexIndices)(const RpGeometry*, const RpTriangle*, RwUInt16*, RwUInt16*, RwUInt16*);
RpMaterial* (*RpGeometryTriangleGetMaterial)(const RpGeometry*, const RpTriangle*);
RpGeometry* (*RpGeometryForAllMaterials)(RpGeometry*, RpMaterialCallBack, void*);
RpGeometry* (*RpGeometryLock)(RpGeometry*, RwInt32);
RpGeometry* (*RpGeometryUnlock)(RpGeometry*);
const RpGeometry* (*RpGeometryForAllMeshes)(const RpGeometry*, RpMeshCallBack, void*);
RpGeometry* (*RpGeometryCreate)(RwInt32, RwInt32, RwUInt32);
RwBool (*RpGeometryDestroy)(RpGeometry*);
RwInt32 (*RpGeometryRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpGeometryRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpGeometrySetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpGeometryGetPluginOffset)(RwUInt32);
RwBool (*RpGeometryValidatePlugins)(const RpGeometry*);
RwUInt32 (*RpGeometryStreamGetSize)(const RpGeometry*);
const RpGeometry* (*RpGeometryStreamWrite)(const RpGeometry*, RwStream*);
RpGeometry* (*RpGeometryStreamRead)(RwStream*);
RpGeometryChunkInfo* (*_rpGeometryChunkInfoRead)(RwStream*, RpGeometryChunkInfo*, RwInt32*);
RpWorldSector* (*RpWorldSectorRender)(RpWorldSector*);
const RpWorldSector* (*RpWorldSectorForAllMeshes)(const RpWorldSector*, RpMeshCallBack, void*);
RwInt32 (*RpWorldSectorRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpWorldSectorRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpWorldSectorSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpWorldSectorSetStreamRightsCallBack)(RwUInt32, RwPluginDataChunkRightsCallBack);
RwInt32 (*RpWorldSectorGetPluginOffset)(RwUInt32);
RwBool (*RpWorldSectorValidatePlugins)(const RpWorldSector*);
void (*RpLightSetFreeListCreateParams)(RwInt32, RwInt32);
RpLight* (*RpLightCreate)(RwInt32);
RwBool (*RpLightDestroy)(RpLight*);
RpLight* (*RpLightSetRadius)(RpLight*, RwReal);
RpLight* (*RpLightSetColor)(RpLight*, const RwRGBAReal*);
RwReal (*RpLightGetConeAngle)(const RpLight*);
RpLight* (*RpLightSetConeAngle)(RpLight*, RwReal);
RwUInt32 (*RpLightStreamGetSize)(const RpLight*);
RpLight* (*RpLightStreamRead)(RwStream*);
RpLightChunkInfo* (*_rpLightChunkInfoRead)(RwStream*, RpLightChunkInfo*, RwInt32*);
RwInt32 (*RpLightRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpLightRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpLightSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpLightGetPluginOffset)(RwUInt32);
RwBool (*RpLightValidatePlugins)(const RpLight*);
void (*RpAtomicSetFreeListCreateParams)(RwInt32, RwInt32);
void (*RpClumpSetFreeListCreateParams)(RwInt32, RwInt32);
RpAtomic* (*AtomicDefaultRenderCallBack)(RpAtomic*);
void (*_rpAtomicResyncInterpolatedSphere)(RpAtomic*);
const RwSphere* (*RpAtomicGetWorldBoundingSphere)(RpAtomic*);
RpClump* (*RpClumpForAllAtomics)(RpClump*, RpAtomicCallBack, void*);
RpClump* (*RpClumpForAllLights)(RpClump*, RpLightCallBack, void*);
RpClump* (*RpClumpForAllCameras)(RpClump*, RwCameraCallBack, void*);
RpAtomic* (*RpAtomicSetFrame)(RpAtomic*, RwFrame*);
RpClump* (*RpClumpCreateSpace)(const RwV3d*, RwReal);
RpClump* (*RpClumpRender)(RpClump*);
RpClump* (*RpClumpRemoveAtomic)(RpClump*, RpAtomic*);
RpClump* (*RpClumpAddAtomic)(RpClump*, RpAtomic*);
RpClump* (*RpClumpRemoveLight)(RpClump*, RpLight*);
RpClump* (*RpClumpAddLight)(RpClump*, RpLight*);
RpClump* (*RpClumpRemoveCamera)(RpClump*, RwCamera*);
RpClump* (*RpClumpAddCamera)(RpClump*, RwCamera*);
RwBool (*RpClumpDestroy)(RpClump*);
RpClump* (*RpClumpCreate)();
RpClump* (*RpClumpClone)(RpClump*);
RwBool (*RpAtomicDestroy)(RpAtomic*);
RpAtomic* (*RpAtomicClone)(RpAtomic*);
RpAtomic* (*RpAtomicCreate)();
RpAtomic* (*RpAtomicSetGeometry)(RpAtomic*, RpGeometry*, RwUInt32);
RpClump* (*RpClumpSetCallBack)(RpClump*, RpClumpCallBack);
RpClumpCallBack (*RpClumpGetCallBack)(const RpClump*);
RwInt32 (*RpClumpGetNumAtomics)(RpClump*);
RwInt32 (*RpClumpGetNumLights)(RpClump*);
RwInt32 (*RpClumpGetNumCameras)(RpClump*);
RpClump* (*RpLightGetClump)(const RpLight*);
RpClump* (*RwCameraGetClump)(const RwCamera*);
RwUInt32 (*RpAtomicStreamGetSize)(RpAtomic*);
RpAtomic* (*RpAtomicStreamRead)(RwStream*);
RpAtomic* (*RpAtomicStreamWrite)(RpAtomic*, RwStream*);
RwUInt32 (*RpClumpStreamGetSize)(RpClump*);
RpClump* (*RpClumpStreamRead)(RwStream*);
RpClump* (*RpClumpStreamWrite)(RpClump*, RwStream*);
RpClumpChunkInfo* (*_rpClumpChunkInfoRead)(RwStream*, RpClumpChunkInfo*, RwInt32*);
RwInt32 (*RpAtomicRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpClumpRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpAtomicRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpAtomicSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpAtomicSetStreamRightsCallBack)(RwUInt32, RwPluginDataChunkRightsCallBack);
RwInt32 (*RpClumpRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpClumpSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpAtomicGetPluginOffset)(RwUInt32);
RwInt32 (*RpClumpGetPluginOffset)(RwUInt32);
RwBool (*RpAtomicValidatePlugins)(const RpAtomic*);
RwBool (*RpClumpValidatePlugins)(const RpClump*);
RwBool (*RpAtomicInstance)(RpAtomic*);
RwBool (*_rpWorldFindBBox)(RpWorld*, RwBBox*);
RpWorld* (*_rpWorldSetupSectorBoundingBoxes)(RpWorld*);
// void (*_rpWorldSectorDeinstanceAll)(RpSector*);
// void (*_rpWorldSectorDestroyRecurse)(RpSector*);
RwBool (*_rpWorldForAllGlobalLights)(RpLightCallBack, void*);
RpWorldSector* (*_rpWorldSectorForAllLocalLights)(RpWorldSector*, RpLightCallBack, void*);
RpWorldSector* (*_rpSectorDefaultRenderCallBack)(RpWorldSector*);
RpWorld* (*RpWorldLock)(RpWorld*);
RpWorld* (*RpWorldUnlock)(RpWorld*);
void (*_rpWorldRegisterWorld)(RpWorld*, RwUInt32);
void (*_rpWorldUnregisterWorld)(RpWorld*);
RwBool (*RpWorldPluginAttach)();
RpWorld* (*RpWorldForAllClumps)(RpWorld*, RpClumpCallBack, void*);
RpWorld* (*RpWorldForAllMaterials)(RpWorld*, RpMaterialCallBack, void*);
RpWorld* (*RpWorldForAllLights)(RpWorld*, RpLightCallBack, void*);
RpWorld* (*RpWorldForAllWorldSectors)(RpWorld*, RpWorldSectorCallBack, void*);
RpWorld* (*RpWorldRender)(RpWorld*);
RwBool (*RpWorldDestroy)(RpWorld*);
RpWorld* (*RpWorldCreate)(RwBBox*);
RpWorld* (*RpWorldSetSectorRenderCallBack)(RpWorld*, RpWorldSectorCallBackRender);
RpWorldSectorCallBackRender (*RpWorldGetSectorRenderCallBack)(const RpWorld*);
RpWorld* (*RpWorldSectorGetWorld)(const RpWorldSector*);
RwInt32 (*RpWorldRegisterPlugin)(RwInt32, RwUInt32, RwPluginObjectConstructor, RwPluginObjectDestructor, RwPluginObjectCopy);
RwInt32 (*RpWorldRegisterPluginStream)(RwUInt32, RwPluginDataChunkReadCallBack, RwPluginDataChunkWriteCallBack, RwPluginDataChunkGetSizeCallBack);
RwInt32 (*RpWorldSetStreamAlwaysCallBack)(RwUInt32, RwPluginDataChunkAlwaysCallBack);
RwInt32 (*RpWorldSetStreamRightsCallBack)(RwUInt32, RwPluginDataChunkRightsCallBack);
RwInt32 (*RpWorldGetPluginOffset)(RwUInt32);
RwBool (*RpWorldValidatePlugins)(RpWorld*);
RxPipeline* (*RpWorldSetDefaultSectorPipeline)(RxPipeline*);
RxPipeline* (*RpAtomicSetDefaultPipeline)(RxPipeline*);
RxPipeline* (*RpMaterialSetDefaultPipeline)(RxPipeline*);
const RpGeometry* (*RpGeometryIsCorrectlySorted)(const RpGeometry*, RwBool*);
RpGeometry* (*RpGeometrySortByMaterial)(const RpGeometry*, RpGeometrySortByMaterialCallBack);
void (*RpTieSetFreeListCreateParams)(RwInt32, RwInt32);
void (*RpLightTieSetFreeListCreateParams)(RwInt32, RwInt32);
RpWorld* (*RpWorldRemoveCamera)(RpWorld*, RwCamera*);
RpWorld* (*RpWorldAddCamera)(RpWorld*, RwCamera*);
RpWorld* (*RwCameraGetWorld)(const RwCamera*);
RpWorld* (*RpWorldRemoveAtomic)(RpWorld*, RpAtomic*);
RpWorld* (*RpWorldAddAtomic)(RpWorld*, RpAtomic*);
RpWorld* (*RpAtomicGetWorld)(const RpAtomic*);
RpWorld* (*RpWorldAddClump)(RpWorld*, RpClump*);
RpWorld* (*RpWorldRemoveClump)(RpWorld*, RpClump*);
RpWorld* (*RpClumpGetWorld)(const RpClump*);
RpWorld* (*RpWorldAddLight)(RpWorld*, RpLight*);
RpWorld* (*RpWorldRemoveLight)(RpWorld*, RpLight*);
RpWorld* (*RpLightGetWorld)(const RpLight*);
RwCamera* (*RwCameraForAllClumpsInFrustum)(RwCamera*, void*);
// RwCamera* (*RwCameraForAllAtomicsInFrustum)(RwCamera*, RpAtomicCallBack, void*);
RwCamera* (*RwCameraForAllSectorsInFrustum)(RwCamera*, RpWorldSectorCallBack, void*);
RpLight* (*RpLightForAllWorldSectors)(RpLight*, RpWorldSectorCallBack, void*);
RpAtomic* (*RpAtomicForAllWorldSectors)(RpAtomic*, RpWorldSectorCallBack, void*);
RpWorldSector* (*RpWorldSectorForAllAtomics)(RpWorldSector*, RpAtomicCallBack, void*);
RpWorldSector* (*RpWorldSectorForAllCollisionAtomics)(RpWorldSector*, RpAtomicCallBack, void*);
RpWorldSector* (*RpWorldSectorForAllLights)(RpWorldSector*, RpLightCallBack, void*);
RwUInt32 (*RpWorldStreamGetSize)(const RpWorld*);
RpWorld* (*RpWorldStreamRead)(RwStream*);
const RpWorld* (*RpWorldStreamWrite)(const RpWorld*, RwStream*);
RpWorldSectorChunkInfo* (*_rpWorldSectorChunkInfoRead)(RwStream*, RpWorldSectorChunkInfo*, RwInt32*);
RpPlaneSectorChunkInfo* (*_rpPlaneSectorChunkInfoRead)(RwStream*, RpPlaneSectorChunkInfo*, RwInt32*);
RpWorldChunkInfo* (*_rpWorldChunkInfoRead)(RwStream*, RpWorldChunkInfo*, RwInt32*);
RwBool (*RtQuatConvertFromMatrix)(RtQuat * const, const RwMatrix * const);
RtQuat* (*RtQuatRotate)(RtQuat*, const RwV3d*, RwReal, RwOpCombineType);
const RtQuat* (*RtQuatQueryRotate)(const RtQuat*, RwV3d*, RwReal*);
RwV3d* (*RtQuatTransformVectors)(RwV3d*, const RwV3d*, const RwInt32, const RtQuat*);
RwReal (*RtQuatModulus)(RtQuat*);
void (*RtAnimAnimationFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*RtAnimInitialize)();
RwBool (*RtAnimRegisterInterpolationScheme)(RtAnimInterpolatorInfo*);
RtAnimInterpolatorInfo* (*RtAnimGetInterpolatorInfo)(RwInt32);
RtAnimAnimation* (*RtAnimAnimationCreate)(RwInt32, RwInt32, RwInt32, RwReal);
RwBool (*RtAnimAnimationDestroy)(RtAnimAnimation*);
RtAnimAnimation* (*RtAnimAnimationRead)(const RwChar*);
RwBool (*RtAnimAnimationWrite)(const RtAnimAnimation*, const RwChar*);
RtAnimAnimation* (*RtAnimAnimationStreamRead)(RwStream*);
RwBool (*RtAnimAnimationStreamWrite)(const RtAnimAnimation*, RwStream*);
RwInt32 (*RtAnimAnimationStreamGetSize)(const RtAnimAnimation*);
RwUInt32 (*RtAnimAnimationGetNumNodes)(const RtAnimAnimation*);
RtAnimInterpolator* (*RtAnimInterpolatorCreate)(RwInt32, RwInt32);
void (*RtAnimInterpolatorDestroy)(RtAnimInterpolator*);
RwBool (*RtAnimInterpolatorSetCurrentAnim)(RtAnimInterpolator*, RtAnimAnimation*);
RwBool (*RtAnimInterpolatorSetKeyFrameCallBacks)(RtAnimInterpolator*, RwInt32);
void (*RtAnimInterpolatorSetAnimLoopCallBack)(RtAnimInterpolator*, RtAnimCallBack, void*);
void (*RtAnimInterpolatorSetAnimCallBack)(RtAnimInterpolator*, RtAnimCallBack, RwReal, void*);
RwBool (*RtAnimInterpolatorCopy)(RtAnimInterpolator*, RtAnimInterpolator*);
RwBool (*RtAnimInterpolatorSubAnimTime)(RtAnimInterpolator*, RwReal);
RwBool (*RtAnimInterpolatorAddAnimTime)(RtAnimInterpolator*, RwReal);
RwBool (*RtAnimInterpolatorSetCurrentTime)(RtAnimInterpolator*, RwReal);
RwBool (*RtAnimAnimationMakeDelta)(RtAnimAnimation*, RwInt32, RwReal);
RwBool (*RtAnimInterpolatorBlend)(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*, RwReal);
RwBool (*RtAnimInterpolatorAddTogether)(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*);
RtAnimInterpolator* (*RtAnimInterpolatorCreateSubInterpolator)(RtAnimInterpolator*, RwInt32, RwInt32, RwInt32);
RwBool (*RtAnimInterpolatorBlendSubInterpolator)(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*, RwReal);
RwBool (*RtAnimInterpolatorAddSubInterpolator)(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*);
void (*RpHAnimHierarchySetFreeListCreateParams)(RwInt32, RwInt32);
RpHAnimHierarchy* (*RpHAnimHierarchyCreate)(RwInt32, RwUInt32*, RwInt32*, RpHAnimHierarchyFlag, RwInt32);
RpHAnimHierarchy* (*RpHAnimHierarchyCreateFromHierarchy)(RpHAnimHierarchy*, RpHAnimHierarchyFlag, RwInt32);
RpHAnimHierarchy* (*RpHAnimHierarchyDestroy)(RpHAnimHierarchy*);
RpHAnimHierarchy* (*RpHAnimHierarchyCreateSubHierarchy)(RpHAnimHierarchy*, RwInt32, RpHAnimHierarchyFlag, RwInt32);
RpHAnimHierarchy* (*RpHAnimHierarchyAttach)(RpHAnimHierarchy*);
RpHAnimHierarchy* (*RpHAnimHierarchyDetach)(RpHAnimHierarchy*);
RpHAnimHierarchy* (*RpHAnimHierarchyAttachFrameIndex)(RpHAnimHierarchy*, RwInt32);
RpHAnimHierarchy* (*RpHAnimHierarchyDetachFrameIndex)(RpHAnimHierarchy*, RwInt32);
RwBool (*RpHAnimFrameSetHierarchy)(RwFrame*, RpHAnimHierarchy*);
RpHAnimHierarchy* (*RpHAnimFrameGetHierarchy)(RwFrame*);
RwMatrix* (*RpHAnimHierarchyGetMatrixArray)(RpHAnimHierarchy*);
RwBool (*RpHAnimHierarchyUpdateMatrices)(RpHAnimHierarchy*);
RwInt32 (*RpHAnimIDGetIndex)(RpHAnimHierarchy*, RwInt32);
RwBool (*RpHAnimPluginAttach)();
void (*RpHAnimKeyFrameApply)(void*, void*);
void (*RpHAnimKeyFrameBlend)(void*, void*, void*, RwReal);
void (*RpHAnimKeyFrameInterpolate)(void*, void*, void*, RwReal, void*);
void (*RpHAnimKeyFrameAdd)(void*, void*, void*);
void (*RpHAnimKeyFrameMulRecip)(void*, void*);
RtAnimAnimation* (*RpHAnimKeyFrameStreamRead)(RwStream*, RtAnimAnimation*);
RwBool (*RpHAnimKeyFrameStreamWrite)(const RtAnimAnimation*, RwStream*);
RwInt32 (*RpHAnimKeyFrameStreamGetSize)(const RtAnimAnimation*);
RwBool (*RpHAnimFrameSetID)(RwFrame*, RwInt32);
RwInt32 (*RpHAnimFrameGetID)(RwFrame*);
_rpUVAnimCustomData* (*_rpUVAnimCustomDataStreamRead)(RwStream*);
const _rpUVAnimCustomData* (*_rpUVAnimCustomDataStreamWrite)(const _rpUVAnimCustomData*, RwStream*);
RwUInt32 (*_rpUVAnimCustomDataStreamGetSize)(const _rpUVAnimCustomData*);
RwBool (*RpUVAnimPluginAttach)();
void (*RpUVAnimLinearKeyFrameApply)(void*, void*);
void (*RpUVAnimLinearKeyFrameBlend)(void*, void*, void*, RwReal);
void (*RpUVAnimLinearKeyFrameInterpolate)(void*, void*, void*, RwReal, void*);
void (*RpUVAnimLinearKeyFrameAdd)(void*, void*, void*);
void (*RpUVAnimLinearKeyFrameMulRecip)(void*, void*);
void (*RpUVAnimParamKeyFrameApply)(void*, void*);
void (*RpUVAnimParamKeyFrameBlend)(void*, void*, void*, RwReal);
void (*RpUVAnimParamKeyFrameInterpolate)(void*, void*, void*, RwReal, void*);
void (*RpUVAnimParamKeyFrameAdd)(void*, void*, void*);
void (*RpUVAnimParamKeyFrameMulRecip)(void*, void*);
RtAnimAnimation* (*RpUVAnimKeyFrameStreamRead)(RwStream*, RtAnimAnimation*);
RwBool (*RpUVAnimKeyFrameStreamWrite)(const RtAnimAnimation*, RwStream*);
RwInt32 (*RpUVAnimKeyFrameStreamGetSize)(const RtAnimAnimation*);
RpUVAnim* (*RpUVAnimCreate)(const RwChar*, RwUInt32, RwUInt32, RwReal, RwUInt32*, RpUVAnimKeyFrameType);
RwBool (*RpUVAnimDestroy)(RpUVAnim*);
RpUVAnim* (*RpUVAnimAddRef)(RpUVAnim*);
const RwChar* (*RpUVAnimGetName)(const RpUVAnim*);
RpMaterial* (*RpMaterialSetUVAnim)(RpMaterial*, RpUVAnim*, RwUInt32);
RpUVAnimInterpolator* (*RpMaterialUVAnimGetInterpolator)(RpMaterial*, RwUInt32);
RpMaterial* (*RpMaterialUVAnimSetInterpolator)(RpMaterial*, RpUVAnimInterpolator*, RwUInt32);
RpMaterial* (*RpMaterialUVAnimSetCurrentTime)(RpMaterial*, RwReal);
RpMaterial* (*RpMaterialUVAnimAddAnimTime)(RpMaterial*, RwReal);
RpMaterial* (*RpMaterialUVAnimSubAnimTime)(RpMaterial*, RwReal);
RwBool (*RpMaterialUVAnimExists)(const RpMaterial*);
void (*RpSkinSetFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*RpSkinPluginAttach)();
RpAtomic* (*RpSkinAtomicSetHAnimHierarchy)(RpAtomic*, RpHAnimHierarchy*);
RpHAnimHierarchy* (*RpSkinAtomicGetHAnimHierarchy)(const RpAtomic*);
RpGeometry* (*RpSkinGeometrySetSkin)(RpGeometry*, RpSkin*);
RpSkin* (*RpSkinGeometryGetSkin)(RpGeometry*);
RpSkin* (*RpSkinCreate)(RwUInt32, RwUInt32, RwMatrixWeights*, RwUInt32*, RwMatrix*);
RpSkin* (*RpSkinDestroy)(RpSkin*);
RwUInt32 (*RpSkinGetNumBones)(RpSkin*);
const RwMatrixWeights* (*RpSkinGetVertexBoneWeights)(RpSkin*);
const RwUInt32* (*RpSkinGetVertexBoneIndices)(RpSkin*);
const RwMatrix* (*RpSkinGetSkinToBoneMatrices)(RpSkin*);
RwBool (*RpSkinIsSplit)(RpSkin*);
RpAtomic* (*RpSkinAtomicSetType)(RpAtomic*, RpSkinType);
RpSkinType (*RpSkinAtomicGetType)(RpAtomic*);
RpGeometry* (*_rpSkinInitialize)(RpGeometry*);
RpGeometry* (*_rpSkinDeinitialize)(RpGeometry*);
RwUInt8* (*_rpSkinGetMeshBoneRemapIndices)(RpSkin*);
RwUInt8* (*_rpSkinGetMeshBoneRLECount)(RpSkin*);
RwUInt8* (*_rpSkinGetMeshBoneRLE)(RpSkin*);
RpSkin* (*_rpSkinSplitDataCreate)(RpSkin*, RwUInt32, RwUInt32, RwUInt32, RwUInt32);
RwBool (*_rpSkinSplitDataDestroy)(RpSkin*);
RtDictSchema* (*RtDictSchemaInit)(RtDictSchema*);
RwBool (*RtDictSchemaDestruct)(RtDictSchema*);
RtDict* (*RtDictSchemaStreamReadDict)(RtDictSchema*, RwStream*);
RtDict* (*RtDictSchemaCreateDict)(RtDictSchema*);
RtDictSchema* (*RtDictSchemaAddDict)(RtDictSchema*, RtDict*);
RtDictSchema* (*RtDictSchemaRemoveDict)(RtDictSchema*, RtDict*);
RwBool (*RtDictSchemaForAllDictionaries)(RtDictSchema*, RtDictCallBack*, RtDictEntryType);
RtDict* (*RtDictSchemaGetCurrentDict)(RtDictSchema*);
RtDictSchema* (*RtDictSchemaSetCurrentDict)(RtDictSchema*, RtDict*);
RwBool (*RtDictDestroy)(RtDict*);
RtDictEntryType (*RtDictAddEntry)(RtDict*, RtDictEntryType);
RtDictEntryType (*RtDictFindNamedEntry)(RtDict*, const RwChar*);
const RtDict* (*RtDictForAllEntries)(const RtDict*, RtDictEntryCallBack*, RtDictEntryType);
RtDict* (*RtDictRemoveEntry)(RtDict*, RtDictEntryType);
const RtDict* (*RtDictStreamWrite)(const RtDict*, RwStream*);
RwUInt32 (*RtDictStreamGetSize)(const RtDict*);
RtDict* (*_rtDictSchemaInitDict)(RtDictSchema*, RtDict*);
RwBool (*_rtDictDestruct)(RtDict*);
void (*RpMatFXMaterialDataSetFreeListCreateParams)(RwInt32, RwInt32);
RwBool (*RpMatFXPluginAttach)();
RpAtomic* (*RpMatFXAtomicEnableEffects)(RpAtomic*);
RwBool (*RpMatFXAtomicQueryEffects)(RpAtomic*);
RpWorldSector* (*RpMatFXWorldSectorEnableEffects)(RpWorldSector*);
RwBool (*RpMatFXWorldSectorQueryEffects)(RpWorldSector*);
RpMaterial* (*RpMatFXMaterialSetEffects)(RpMaterial*, RpMatFXMaterialFlags);
RpMaterial* (*RpMatFXMaterialSetupBumpMap)(RpMaterial*, RwTexture*, RwFrame*, RwReal);
RpMaterial* (*RpMatFXMaterialSetupEnvMap)(RpMaterial*, RwTexture*, RwFrame*, RwBool, RwReal);
RpMaterial* (*RpMatFXMaterialSetupDualTexture)(RpMaterial*, RwTexture*, RwBlendFunction, RwBlendFunction);
RpMatFXMaterialFlags (*RpMatFXMaterialGetEffects)(const RpMaterial*);
RpMaterial* (*RpMatFXMaterialSetBumpMapTexture)(RpMaterial*, RwTexture*);
RpMaterial* (*RpMatFXMaterialSetBumpMapFrame)(RpMaterial*, RwFrame*);
RpMaterial* (*RpMatFXMaterialSetBumpMapCoefficient)(RpMaterial*, RwReal);
RwTexture* (*RpMatFXMaterialGetBumpMapTexture)(const RpMaterial*);
RwTexture* (*RpMatFXMaterialGetBumpMapBumpedTexture)(const RpMaterial*);
RwFrame* (*RpMatFXMaterialGetBumpMapFrame)(const RpMaterial*);
RwReal (*RpMatFXMaterialGetBumpMapCoefficient)(const RpMaterial*);
RpMaterial* (*RpMatFXMaterialSetEnvMapTexture)(RpMaterial*, RwTexture*);
RpMaterial* (*RpMatFXMaterialSetEnvMapFrame)(RpMaterial*, RwFrame*);
RpMaterial* (*RpMatFXMaterialSetEnvMapFrameBufferAlpha)(RpMaterial*, RwBool);
RpMaterial* (*RpMatFXMaterialSetEnvMapCoefficient)(RpMaterial*, RwReal);
RwTexture* (*RpMatFXMaterialGetEnvMapTexture)(const RpMaterial*);
RwFrame* (*RpMatFXMaterialGetEnvMapFrame)(const RpMaterial*);
RwBool (*RpMatFXMaterialGetEnvMapFrameBufferAlpha)(const RpMaterial*);
RwReal (*RpMatFXMaterialGetEnvMapCoefficient)(const RpMaterial*);
RpMaterial* (*RpMatFXMaterialSetDualTexture)(RpMaterial*, RwTexture*);
RpMaterial* (*RpMatFXMaterialSetDualBlendModes)(RpMaterial*, RwBlendFunction, RwBlendFunction);
RwTexture* (*RpMatFXMaterialGetDualTexture)(const RpMaterial*);
const RpMaterial* (*RpMatFXMaterialGetDualBlendModes)(const RpMaterial*, RwBlendFunction*, RwBlendFunction*);
RpMaterial* (*RpMatFXMaterialSetUVTransformMatrices)(RpMaterial*, RwMatrix*, RwMatrix*);
const RpMaterial* (*RpMatFXMaterialGetUVTransformMatrices)(const RpMaterial*, RwMatrix*, RwMatrix*);
RsEventStatus (*RsEventHandler)(RsEvent, void*);
// RwInt8 (*RpAnisotGetMaxSupportedMaxAnisotropy)();
// RwTexture* (*RpAnisotTextureSetMaxAnisotropy)(RwTexture*, RwInt8);
// RwInt8 (*RpAnisotTextureGetMaxAnisotropy)(RwTexture*);
// RwBool (*RpAnisotPluginAttach)();
RwImage* (*RtBMPImageWrite)(RwImage*, const RwChar*);
RwImage* (*RtBMPImageRead)(const RwChar*);
RwImage* (*RtPNGImageWrite)(RwImage*, const RwChar*);
RwImage* (*RtPNGImageRead)(const RwChar*);
void (*_rpMaterialSetDefaultSurfaceProperties)(RwSurfaceProperties*);
void (*_rwObjectHasFrameSetFrame)(void*, RwFrame*);
void (*_rwObjectHasFrameReleaseFrame)(void*);
RwBool (*_rwStreamReadChunkHeader)(RwStream*, RwUInt32*, RwUInt32*, RwUInt32*, RwUInt32*);
